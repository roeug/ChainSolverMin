      SUBROUTINE LSODAR (F, NEQ, Y, T, TOUT, ITOL, RTOL, ATOL, ITASK, 
     1            ISTATE, IOPT, RWORK, LRW, IWORK, LIW, JAC, JT,
     2            G, NG, JROOT)
      EXTERNAL F, JAC, G
      INTEGER NEQ, ITOL, ITASK, ISTATE, IOPT, LRW, IWORK, LIW, JT,
     1   NG, JROOT
      DOUBLE PRECISION Y, T, TOUT, RTOL, ATOL, RWORK
      DIMENSION NEQ(1), Y(1), RTOL(1), ATOL(1), RWORK(LRW), IWORK(LIW),
     1   JROOT(NG)
C-----------------------------------------------------------------------
C THIS IS THE MARCH 30, 1987 VERSION OF 
C LSODAR.. LIVERMORE SOLVER FOR ORDINARY DIFFERENTIAL EQUATIONS, WITH 
C          AUTOMATIC METHOD SWITCHING FOR STIFF AND NONSTIFF PROBLEMS,
C          AND WITH ROOT-FINDING.
C
C THIS VERSION IS IN DOUBLE PRECISION.
C
C LSODAR SOLVES THE INITIAL VALUE PROBLEM FOR STIFF OR NONSTIFF
C SYSTEMS OF FIRST ORDER ODE-S,
C     DY/DT = F(T,Y) ,  OR, IN COMPONENT FORM,
C     DY(I)/DT = F(I) = F(I,T,Y(1),Y(2),...,Y(NEQ)) (I = 1,...,NEQ).
C AT THE SAME TIME, IT LOCATES THE ROOTS OF ANY OF A SET OF FUNCTIONS 
C     G(I) = G(I,T,Y(1),...,Y(NEQ))  (I = 1,...,NG).
C
C THIS A VARIANT VERSION OF THE LSODE PACKAGE.  IT DIFFERS FROM LSODE 
C IN TWO WAYS..
C (A) IT SWITCHES AUTOMATICALLY BETWEEN STIFF AND NONSTIFF METHODS.
C THIS MEANS THAT THE USER DOES NOT HAVE TO DETERMINE WHETHER THE
C PROBLEM IS STIFF OR NOT, AND THE SOLVER WILL AUTOMATICALLY CHOOSE THE
C APPROPRIATE METHOD.  IT ALWAYS STARTS WITH THE NONSTIFF METHOD.
C (B) IT FINDS THE ROOT OF AT LEAST ONE OF A SET OF CONSTRAINT
C FUNCTIONS G(I) OF THE INDEPENDENT AND DEPENDENT VARIABLES.
C IT FINDS ONLY THOSE ROOTS FOR WHICH SOME G(I), AS A FUNCTION
C OF T, CHANGES SIGN IN THE INTERVAL OF INTEGRATION.
C IT THEN RETURNS THE SOLUTION AT THE ROOT, IF THAT OCCURS
C SOONER THAN THE SPECIFIED STOP CONDITION, AND OTHERWISE RETURNS
C THE SOLUTION ACCORDING THE SPECIFIED STOP CONDITION.
C
C AUTHORS..
C                LINDA R. PETZOLD  AND  ALAN C. HINDMARSH,
C                COMPUTING AND MATHEMATICS RESEARCH DIVISION, L-316
C                LAWRENCE LIVERMORE NATIONAL LABORATORY
C                LIVERMORE, CA 94550.
C
C REFERENCES..
C 1.  ALAN C. HINDMARSH,  ODEPACK, A SYSTEMATIZED COLLECTION OF ODE
C     SOLVERS, IN SCIENTIFIC COMPUTING, R. S. STEPLEMAN ET AL. (EDS.),
C     NORTH-HOLLAND, AMSTERDAM, 1983, PP. 55-64.
C 2.  LINDA R. PETZOLD, AUTOMATIC SELECTION OF METHODS FOR SOLVING
C     STIFF AND NONSTIFF SYSTEMS OF ORDINARY DIFFERENTIAL EQUATIONS,
C     SIAM J. SCI. STAT. COMPUT. 4 (1983), PP. 136-148.
C 3.  KATHIE L. HIEBERT AND LAWRENCE F. SHAMPINE, IMPLICITLY DEFINED
C     OUTPUT POINTS FOR SOLUTIONS OF ODE-S, SANDIA REPORT SAND80-0180,
C     FEBRUARY, 1980.
C-----------------------------------------------------------------------
C SUMMARY OF USAGE. 
C
C COMMUNICATION BETWEEN THE USER AND THE LSODAR PACKAGE, FOR NORMAL
C SITUATIONS, IS SUMMARIZED HERE.  THIS SUMMARY DESCRIBES ONLY A SUBSET
C OF THE FULL SET OF OPTIONS AVAILABLE.  SEE THE FULL DESCRIPTION FOR 
C DETAILS, INCLUDING ALTERNATIVE TREATMENT OF THE JACOBIAN MATRIX,
C OPTIONAL INPUTS AND OUTPUTS, NONSTANDARD OPTIONS, AND
C INSTRUCTIONS FOR SPECIAL SITUATIONS.  SEE ALSO THE EXAMPLE
C PROBLEM (WITH PROGRAM AND OUTPUT) FOLLOWING THIS SUMMARY. 
C
C A. FIRST PROVIDE A SUBROUTINE OF THE FORM..
C               SUBROUTINE F (NEQ, T, Y, YDOT)
C               DIMENSION Y(NEQ), YDOT(NEQ)
C WHICH SUPPLIES THE VECTOR FUNCTION F BY LOADING YDOT(I) WITH F(I).
C
C B. PROVIDE A SUBROUTINE OF THE FORM.. 
C               SUBROUTINE G (NEQ, T, Y, NG, GOUT)
C               DIMENSION Y(NEQ), GOUT(NG)
C WHICH SUPPLIES THE VECTOR FUNCTION G BY LOADING GOUT(I) WITH
C G(I), THE I-TH CONSTRAINT FUNCTION WHOSE ROOT IS SOUGHT.
C
C C. WRITE A MAIN PROGRAM WHICH CALLS SUBROUTINE LSODAR ONCE FOR
C EACH POINT AT WHICH ANSWERS ARE DESIRED.  THIS SHOULD ALSO PROVIDE
C FOR POSSIBLE USE OF LOGICAL UNIT 6 FOR OUTPUT OF ERROR MESSAGES BY
C LSODAR.  ON THE FIRST CALL TO LSODAR, SUPPLY ARGUMENTS AS FOLLOWS.. 
C F      = NAME OF SUBROUTINE FOR RIGHT-HAND SIDE VECTOR F. 
C          THIS NAME MUST BE DECLARED EXTERNAL IN CALLING PROGRAM.
C NEQ    = NUMBER OF FIRST ORDER ODE-S. 
C Y      = ARRAY OF INITIAL VALUES, OF LENGTH NEQ.
C T      = THE INITIAL VALUE OF THE INDEPENDENT VARIABLE.
C TOUT   = FIRST POINT WHERE OUTPUT IS DESIRED (.NE. T).
C ITOL   = 1 OR 2 ACCORDING AS ATOL (BELOW) IS A SCALAR OR ARRAY.
C RTOL   = RELATIVE TOLERANCE PARAMETER (SCALAR). 
C ATOL   = ABSOLUTE TOLERANCE PARAMETER (SCALAR OR ARRAY).
C          THE ESTIMATED LOCAL ERROR IN Y(I) WILL BE CONTROLLED SO AS 
C          TO BE LESS THAN
C             EWT(I) = RTOL*ABS(Y(I)) + ATOL     IF ITOL = 1, OR
C             EWT(I) = RTOL*ABS(Y(I)) + ATOL(I)  IF ITOL = 2.
C          THUS THE LOCAL ERROR TEST PASSES IF, IN EACH COMPONENT,
C          EITHER THE ABSOLUTE ERROR IS LESS THAN ATOL (OR ATOL(I)),
C          OR THE RELATIVE ERROR IS LESS THAN RTOL.
C          USE RTOL = 0.0 FOR PURE ABSOLUTE ERROR CONTROL, AND
C          USE ATOL = 0.0 (OR ATOL(I) = 0.0) FOR PURE RELATIVE ERROR
C          CONTROL.  CAUTION.. ACTUAL (GLOBAL) ERRORS MAY EXCEED THESE
C          LOCAL TOLERANCES, SO CHOOSE THEM CONSERVATIVELY. 
C ITASK  = 1 FOR NORMAL COMPUTATION OF OUTPUT VALUES OF Y AT T = TOUT.
C ISTATE = INTEGER FLAG (INPUT AND OUTPUT).  SET ISTATE = 1.
C IOPT   = 0 TO INDICATE NO OPTIONAL INPUTS USED. 
C RWORK  = REAL WORK ARRAY OF LENGTH AT LEAST..
C             22 + NEQ * MAX(16, NEQ + 9) + 3*NG. 
C          SEE ALSO PARAGRAPH F BELOW.
C LRW    = DECLARED LENGTH OF RWORK (IN USER-S DIMENSION).
C IWORK  = INTEGER WORK ARRAY OF LENGTH AT LEAST  20 + NEQ. 
C LIW    = DECLARED LENGTH OF IWORK (IN USER-S DIMENSION).
C JAC    = NAME OF SUBROUTINE FOR JACOBIAN MATRIX.
C          USE A DUMMY NAME.  SEE ALSO PARAGRAPH F BELOW.
C JT     = JACOBIAN TYPE INDICATOR.  SET JT = 2.
C          SEE ALSO PARAGRAPH F BELOW.
C G      = NAME OF SUBROUTINE FOR CONSTRAINT FUNCTIONS, WHOSE
C          ROOTS ARE DESIRED DURING THE INTEGRATION.
C          THIS NAME MUST BE DECLARED EXTERNAL IN CALLING PROGRAM.
C NG     = NUMBER OF CONSTRAINT FUNCTIONS G(I).  IF THERE ARE NONE,
C          SET NG = 0, AND PASS A DUMMY NAME FOR G.
C JROOT  = INTEGER ARRAY OF LENGTH NG FOR OUTPUT OF ROOT INFORMATION. 
C          SEE NEXT PARAGRAPH.
C NOTE THAT THE MAIN PROGRAM MUST DECLARE ARRAYS Y, RWORK, IWORK,
C JROOT, AND POSSIBLY ATOL.
C
C D. THE OUTPUT FROM THE FIRST CALL (OR ANY CALL) IS..
C      Y = ARRAY OF COMPUTED VALUES OF Y(T) VECTOR.
C      T = CORRESPONDING VALUE OF INDEPENDENT VARIABLE.  THIS IS
C          TOUT IF ISTATE = 2, OR THE ROOT LOCATION IF ISTATE = 3,
C          OR THE FARTHEST POINT REACHED IF LSODAR WAS UNSUCCESSFUL.
C ISTATE = 2 OR 3  IF LSODAR WAS SUCCESSFUL, NEGATIVE OTHERWISE.
C           2 MEANS NO ROOT WAS FOUND, AND TOUT WAS REACHED AS DESIRED.
C           3 MEANS A ROOT WAS FOUND PRIOR TO REACHING TOUT.
C          -1 MEANS EXCESS WORK DONE ON THIS CALL (PERHAPS WRONG JT). 
C          -2 MEANS EXCESS ACCURACY REQUESTED (TOLERANCES TOO SMALL). 
C          -3 MEANS ILLEGAL INPUT DETECTED (SEE PRINTED MESSAGE).
C          -4 MEANS REPEATED ERROR TEST FAILURES (CHECK ALL INPUTS).
C          -5 MEANS REPEATED CONVERGENCE FAILURES (PERHAPS BAD JACOBIAN
C             SUPPLIED OR WRONG CHOICE OF JT OR TOLERANCES).
C          -6 MEANS ERROR WEIGHT BECAME ZERO DURING PROBLEM. (SOLUTION
C             COMPONENT I VANISHED, AND ATOL OR ATOL(I) = 0.)
C          -7 MEANS WORK SPACE INSUFFICIENT TO FINISH (SEE MESSAGES). 
C JROOT  = ARRAY SHOWING ROOTS FOUND IF ISTATE = 3 ON RETURN.
C          JROOT(I) = 1 IF G(I) HAS A ROOT AT T, OR 0 OTHERWISE.
C
C E. TO CONTINUE THE INTEGRATION AFTER A SUCCESSFUL RETURN, PROCEED
C AS FOLLOWS..
C  (A) IF ISTATE = 2 ON RETURN, RESET TOUT AND CALL LSODAR AGAIN.
C  (B) IF ISTATE = 3 ON RETURN, RESET ISTATE TO 2 AND CALL LSODAR AGAIN.
C IN EITHER CASE, NO OTHER PARAMETERS NEED BE RESET.
C
C F. NOTE.. IF AND WHEN LSODAR REGARDS THE PROBLEM AS STIFF, AND
C SWITCHES METHODS ACCORDINGLY, IT MUST MAKE USE OF THE NEQ BY NEQ
C JACOBIAN MATRIX, J = DF/DY.  FOR THE SAKE OF SIMPLICITY, THE
C INPUTS TO LSODAR RECOMMENDED IN PARAGRAPH C ABOVE CAUSE LSODAR TO
C TREAT J AS A FULL MATRIX, AND TO APPROXIMATE IT INTERNALLY BY
C DIFFERENCE QUOTIENTS.  ALTERNATIVELY, J CAN BE TREATED AS A BAND
C MATRIX (WITH GREAT POTENTIAL REDUCTION IN THE SIZE OF THE RWORK
C ARRAY).  ALSO, IN EITHER THE FULL OR BANDED CASE, THE USER CAN SUPPLY
C J IN CLOSED FORM, WITH A ROUTINE WHOSE NAME IS PASSED AS THE JAC
C ARGUMENT.  THESE ALTERNATIVES ARE DESCRIBED IN THE PARAGRAPHS ON
C RWORK, JAC, AND JT IN THE FULL DESCRIPTION OF THE CALL SEQUENCE BELOW.
C
C-----------------------------------------------------------------------
C EXAMPLE PROBLEM.
C
C THE FOLLOWING IS A SIMPLE EXAMPLE PROBLEM, WITH THE CODING
C NEEDED FOR ITS SOLUTION BY LSODAR.  THE PROBLEM IS FROM CHEMICAL
C KINETICS, AND CONSISTS OF THE FOLLOWING THREE RATE EQUATIONS..
C     DY1/DT = -.04*Y1 + 1.E4*Y2*Y3
C     DY2/DT = .04*Y1 - 1.E4*Y2*Y3 - 3.E7*Y2**2
C     DY3/DT = 3.E7*Y2**2
C ON THE INTERVAL FROM T = 0.0 TO T = 4.E10, WITH INITIAL CONDITIONS
C Y1 = 1.0, Y2 = Y3 = 0.  THE PROBLEM IS STIFF.
C IN ADDITION, WE WANT TO FIND THE VALUES OF T, Y1, Y2, AND Y3 AT WHICH
C   (1) Y1 REACHES THE VALUE 1.E-4, AND 
C   (2) Y3 REACHES THE VALUE 1.E-2.
C
C THE FOLLOWING CODING SOLVES THIS PROBLEM WITH LSODAR,
C PRINTING RESULTS AT T = .4, 4., ..., 4.E10, AND AT THE COMPUTED
C ROOTS.  IT USES ITOL = 2 AND ATOL MUCH SMALLER FOR Y2 THAN Y1 OR Y3 
C BECAUSE Y2 HAS MUCH SMALLER VALUES.
C AT THE END OF THE RUN, STATISTICAL QUANTITIES OF INTEREST ARE
C PRINTED (SEE OPTIONAL OUTPUTS IN THE FULL DESCRIPTION BELOW).
C
C     EXTERNAL FEX, GEX
C     DOUBLE PRECISION ATOL, RTOL, RWORK, T, TOUT, Y
C     DIMENSION Y(3), ATOL(3), RWORK(76), IWORK(23), JROOT(2)
C     NEQ = 3
C     Y(1) = 1.0D0
C     Y(2) = 0.0D0
C     Y(3) = 0.0D0
C     T = 0.0D0
C     TOUT = 0.4D0
C     ITOL = 2
C     RTOL = 1.0D-4 
C     ATOL(1) = 1.0D-6
C     ATOL(2) = 1.0D-10
C     ATOL(3) = 1.0D-6
C     ITASK = 1
C     ISTATE = 1
C     IOPT = 0
C     LRW = 76
C     LIW = 23
C     JT = 2
C     NG = 2
C     DO 40 IOUT = 1,12
C 10    CALL LSODAR(FEX,NEQ,Y,T,TOUT,ITOL,RTOL,ATOL,ITASK,ISTATE,
C    1     IOPT,RWORK,LRW,IWORK,LIW,JDUM,JT,GEX,NG,JROOT)
C       WRITE(6,20)T,Y(1),Y(2),Y(3)
C 20    FORMAT(7H AT T =,E12.4,6H   Y =,3E14.6)
C       IF (ISTATE .LT. 0) GO TO 80
C       IF (ISTATE .EQ. 2) GO TO 40
C       WRITE(6,30)JROOT(1),JROOT(2)
C 30    FORMAT(5X,35H THE ABOVE LINE IS A ROOT,  JROOT =,2I5)
C       ISTATE = 2
C       GO TO 10
C 40    TOUT = TOUT*10.0D0
C     WRITE(6,60)IWORK(11),IWORK(12),IWORK(13),IWORK(10),
C    1   IWORK(19),RWORK(15)
C 60  FORMAT(/12H NO. STEPS =,I4,11H  NO. F-S =,I4,11H  NO. J-S =,I4, 
C    1   11H  NO. G-S =,I4/
C    2   19H METHOD LAST USED =,I2,25H   LAST SWITCH WAS AT T =,E12.4)
C     STOP
C 80  WRITE(6,90)ISTATE
C 90  FORMAT(///22H ERROR HALT.. ISTATE =,I3)
C     STOP
C     END 
C
C     SUBROUTINE FEX (NEQ, T, Y, YDOT)
C     DOUBLE PRECISION T, Y, YDOT
C     DIMENSION Y(3), YDOT(3) 
C     YDOT(1) = -0.04D0*Y(1) + 1.0D4*Y(2)*Y(3)
C     YDOT(3) = 3.0D7*Y(2)*Y(2)
C     YDOT(2) = -YDOT(1) - YDOT(3)
C     RETURN
C     END 
C
C     SUBROUTINE GEX (NEQ, T, Y, NG, GOUT)
C     DOUBLE PRECISION T, Y, GOUT
C     DIMENSION Y(3), GOUT(2) 
C     GOUT(1) = Y(1) - 1.0D-4 
C     GOUT(2) = Y(3) - 1.0D-2 
C     RETURN
C     END 
C
C THE OUTPUT OF THIS PROGRAM (ON A CDC-7600 IN SINGLE PRECISION)
C IS AS FOLLOWS..
C
C   AT T =  2.6400E-01   Y =  9.899653E-01  3.470563E-05  1.000000E-02
C        THE ABOVE LINE IS A ROOT,  JROOT =    0    1
C   AT T =  4.0000E-01   Y =  9.851712E-01  3.386380E-05  1.479493E-02
C   AT T =  4.0000E+00   Y =  9.055333E-01  2.240655E-05  9.444430E-02
C   AT T =  4.0000E+01   Y =  7.158403E-01  9.186334E-06  2.841505E-01
C   AT T =  4.0000E+02   Y =  4.505250E-01  3.222964E-06  5.494717E-01
C   AT T =  4.0000E+03   Y =  1.831975E-01  8.941774E-07  8.168016E-01
C   AT T =  4.0000E+04   Y =  3.898730E-02  1.621940E-07  9.610125E-01
C   AT T =  4.0000E+05   Y =  4.936363E-03  1.984221E-08  9.950636E-01
C   AT T =  4.0000E+06   Y =  5.161831E-04  2.065786E-09  9.994838E-01
C   AT T =  2.0745E+07   Y =  1.000000E-04  4.000395E-10  9.999000E-01
C        THE ABOVE LINE IS A ROOT,  JROOT =    1    0
C   AT T =  4.0000E+07   Y =  5.179817E-05  2.072032E-10  9.999482E-01
C   AT T =  4.0000E+08   Y =  5.283401E-06  2.113371E-11  9.999947E-01
C   AT T =  4.0000E+09   Y =  4.659031E-07  1.863613E-12  9.999995E-01
C   AT T =  4.0000E+10   Y =  1.404280E-08  5.617126E-14  1.000000E+00
C
C   NO. STEPS = 361  NO. F-S = 693  NO. J-S =  64  NO. G-S = 390
C   METHOD LAST USED = 2   LAST SWITCH WAS AT T =  6.0092E-03
C-----------------------------------------------------------------------
C FULL DESCRIPTION OF USER INTERFACE TO LSODAR.
C
C THE USER INTERFACE TO LSODAR CONSISTS OF THE FOLLOWING PARTS.
C
C I.   THE CALL SEQUENCE TO SUBROUTINE LSODAR, WHICH IS A DRIVER
C      ROUTINE FOR THE SOLVER.  THIS INCLUDES DESCRIPTIONS OF BOTH
C      THE CALL SEQUENCE ARGUMENTS AND OF USER-SUPPLIED ROUTINES.
C      FOLLOWING THESE DESCRIPTIONS IS A DESCRIPTION OF
C      OPTIONAL INPUTS AVAILABLE THROUGH THE CALL SEQUENCE, AND THEN
C      A DESCRIPTION OF OPTIONAL OUTPUTS (IN THE WORK ARRAYS).
C
C II.  DESCRIPTIONS OF OTHER ROUTINES IN THE LSODAR PACKAGE THAT MAY BE
C      (OPTIONALLY) CALLED BY THE USER.  THESE PROVIDE THE ABILITY TO 
C      ALTER ERROR MESSAGE HANDLING, SAVE AND RESTORE THE INTERNAL
C      COMMON, AND OBTAIN SPECIFIED DERIVATIVES OF THE SOLUTION Y(T). 
C
C III. DESCRIPTIONS OF COMMON BLOCKS TO BE DECLARED IN OVERLAY
C      OR SIMILAR ENVIRONMENTS, OR TO BE SAVED WHEN DOING AN INTERRUPT
C      OF THE PROBLEM AND CONTINUED SOLUTION LATER.
C
C IV.  DESCRIPTION OF A SUBROUTINE IN THE LSODAR PACKAGE,
C      WHICH THE USER MAY REPLACE WITH HIS OWN VERSION, IF DESIRED.
C      THIS RELATES TO THE MEASUREMENT OF ERRORS. 
C
C-----------------------------------------------------------------------
C PART I.  CALL SEQUENCE.
C
C THE CALL SEQUENCE PARAMETERS USED FOR INPUT ONLY ARE
C     F, NEQ, TOUT, ITOL, RTOL, ATOL, ITASK, IOPT, LRW, LIW, JAC,
C     JT, G, AND NG,
C THAT USED ONLY FOR OUTPUT IS  JROOT,
C AND THOSE USED FOR BOTH INPUT AND OUTPUT ARE
C     Y, T, ISTATE. 
C THE WORK ARRAYS RWORK AND IWORK ARE ALSO USED FOR CONDITIONAL AND
C OPTIONAL INPUTS AND OPTIONAL OUTPUTS.  (THE TERM OUTPUT HERE REFERS 
C TO THE RETURN FROM SUBROUTINE LSODAR TO THE USER-S CALLING PROGRAM.)
C
C THE LEGALITY OF INPUT PARAMETERS WILL BE THOROUGHLY CHECKED ON THE
C INITIAL CALL FOR THE PROBLEM, BUT NOT CHECKED THEREAFTER UNLESS A
C CHANGE IN INPUT PARAMETERS IS FLAGGED BY ISTATE = 3 ON INPUT.
C
C THE DESCRIPTIONS OF THE CALL ARGUMENTS ARE AS FOLLOWS.
C
C F      = THE NAME OF THE USER-SUPPLIED SUBROUTINE DEFINING THE
C          ODE SYSTEM.  THE SYSTEM MUST BE PUT IN THE FIRST-ORDER
C          FORM DY/DT = F(T,Y), WHERE F IS A VECTOR-VALUED FUNCTION
C          OF THE SCALAR T AND THE VECTOR Y.  SUBROUTINE F IS TO
C          COMPUTE THE FUNCTION F.  IT IS TO HAVE THE FORM
C               SUBROUTINE F (NEQ, T, Y, YDOT)
C               DIMENSION Y(1), YDOT(1) 
C          WHERE NEQ, T, AND Y ARE INPUT, AND THE ARRAY YDOT = F(T,Y) 
C          IS OUTPUT.  Y AND YDOT ARE ARRAYS OF LENGTH NEQ. 
C          (IN THE DIMENSION STATEMENT ABOVE, 1 IS A DUMMY
C          DIMENSION.. IT CAN BE REPLACED BY ANY VALUE.)
C          SUBROUTINE F SHOULD NOT ALTER Y(1),...,Y(NEQ).
C          F MUST BE DECLARED EXTERNAL IN THE CALLING PROGRAM.
C
C          SUBROUTINE F MAY ACCESS USER-DEFINED QUANTITIES IN
C          NEQ(2),... AND/OR IN Y(NEQ(1)+1),... IF NEQ IS AN ARRAY
C          (DIMENSIONED IN F) AND/OR Y HAS LENGTH EXCEEDING NEQ(1).
C          SEE THE DESCRIPTIONS OF NEQ AND Y BELOW.
C
C          IF QUANTITIES COMPUTED IN THE F ROUTINE ARE NEEDED
C          EXTERNALLY TO LSODAR, AN EXTRA CALL TO F SHOULD BE MADE
C          FOR THIS PURPOSE, FOR CONSISTENT AND ACCURATE RESULTS.
C          IF ONLY THE DERIVATIVE DY/DT IS NEEDED, USE INTDY INSTEAD. 
C
C NEQ    = THE SIZE OF THE ODE SYSTEM (NUMBER OF FIRST ORDER
C          ORDINARY DIFFERENTIAL EQUATIONS).  USED ONLY FOR INPUT.
C          NEQ MAY BE DECREASED, BUT NOT INCREASED, DURING THE PROBLEM.
C          IF NEQ IS DECREASED (WITH ISTATE = 3 ON INPUT), THE
C          REMAINING COMPONENTS OF Y SHOULD BE LEFT UNDISTURBED, IF
C          THESE ARE TO BE ACCESSED IN F AND/OR JAC.
C
C          NORMALLY, NEQ IS A SCALAR, AND IT IS GENERALLY REFERRED TO 
C          AS A SCALAR IN THIS USER INTERFACE DESCRIPTION.  HOWEVER,
C          NEQ MAY BE AN ARRAY, WITH NEQ(1) SET TO THE SYSTEM SIZE.
C          (THE LSODAR PACKAGE ACCESSES ONLY NEQ(1).)  IN EITHER CASE,
C          THIS PARAMETER IS PASSED AS THE NEQ ARGUMENT IN ALL CALLS
C          TO F, JAC, AND G.  HENCE, IF IT IS AN ARRAY, LOCATIONS
C          NEQ(2),... MAY BE USED TO STORE OTHER INTEGER DATA AND PASS
C          IT TO F, JAC, AND G.  EACH SUCH SUBROUTINE MUST INCLUDE
C          NEQ IN A DIMENSION STATEMENT IN THAT CASE.
C
C Y      = A REAL ARRAY FOR THE VECTOR OF DEPENDENT VARIABLES, OF
C          LENGTH NEQ OR MORE.  USED FOR BOTH INPUT AND OUTPUT ON THE 
C          FIRST CALL (ISTATE = 1), AND ONLY FOR OUTPUT ON OTHER CALLS.
C          ON THE FIRST CALL, Y MUST CONTAIN THE VECTOR OF INITIAL
C          VALUES.  ON OUTPUT, Y CONTAINS THE COMPUTED SOLUTION VECTOR,
C          EVALUATED AT T.  IF DESIRED, THE Y ARRAY MAY BE USED
C          FOR OTHER PURPOSES BETWEEN CALLS TO THE SOLVER.
C
C          THIS ARRAY IS PASSED AS THE Y ARGUMENT IN ALL CALLS TO F,
C          JAC, AND G.  HENCE ITS LENGTH MAY EXCEED NEQ, AND LOCATIONS
C          Y(NEQ+1),... MAY BE USED TO STORE OTHER REAL DATA AND
C          PASS IT TO F, JAC, AND G.  (THE LSODAR PACKAGE ACCESSES ONLY
C          Y(1),...,Y(NEQ).)
C
C T      = THE INDEPENDENT VARIABLE.  ON INPUT, T IS USED ONLY ON THE 
C          FIRST CALL, AS THE INITIAL POINT OF THE INTEGRATION.
C          ON OUTPUT, AFTER EACH CALL, T IS THE VALUE AT WHICH A
C          COMPUTED SOLUTION Y IS EVALUATED (USUALLY THE SAME AS TOUT).
C          IF A ROOT WAS FOUND, T IS THE COMPUTED LOCATION OF THE
C          ROOT REACHED FIRST, ON OUTPUT.
C          ON AN ERROR RETURN, T IS THE FARTHEST POINT REACHED.
C
C TOUT   = THE NEXT VALUE OF T AT WHICH A COMPUTED SOLUTION IS DESIRED.
C          USED ONLY FOR INPUT.
C
C          WHEN STARTING THE PROBLEM (ISTATE = 1), TOUT MAY BE EQUAL
C          TO T FOR ONE CALL, THEN SHOULD .NE. T FOR THE NEXT CALL.
C          FOR THE INITIAL T, AN INPUT VALUE OF TOUT .NE. T IS USED
C          IN ORDER TO DETERMINE THE DIRECTION OF THE INTEGRATION
C          (I.E. THE ALGEBRAIC SIGN OF THE STEP SIZES) AND THE ROUGH
C          SCALE OF THE PROBLEM.  INTEGRATION IN EITHER DIRECTION
C          (FORWARD OR BACKWARD IN T) IS PERMITTED.
C
C          IF ITASK = 2 OR 5 (ONE-STEP MODES), TOUT IS IGNORED AFTER
C          THE FIRST CALL (I.E. THE FIRST CALL WITH TOUT .NE. T).
C          OTHERWISE, TOUT IS REQUIRED ON EVERY CALL.
C
C          IF ITASK = 1, 3, OR 4, THE VALUES OF TOUT NEED NOT BE
C          MONOTONE, BUT A VALUE OF TOUT WHICH BACKS UP IS LIMITED
C          TO THE CURRENT INTERNAL T INTERVAL, WHOSE ENDPOINTS ARE
C          TCUR - HU AND TCUR (SEE OPTIONAL OUTPUTS, BELOW, FOR
C          TCUR AND HU).
C
C ITOL   = AN INDICATOR FOR THE TYPE OF ERROR CONTROL.  SEE 
C          DESCRIPTION BELOW UNDER ATOL.  USED ONLY FOR INPUT.
C
C RTOL   = A RELATIVE ERROR TOLERANCE PARAMETER, EITHER A SCALAR OR
C          AN ARRAY OF LENGTH NEQ.  SEE DESCRIPTION BELOW UNDER ATOL. 
C          INPUT ONLY.
C
C ATOL   = AN ABSOLUTE ERROR TOLERANCE PARAMETER, EITHER A SCALAR OR
C          AN ARRAY OF LENGTH NEQ.  INPUT ONLY.
C
C             THE INPUT PARAMETERS ITOL, RTOL, AND ATOL DETERMINE
C          THE ERROR CONTROL PERFORMED BY THE SOLVER.  THE SOLVER WILL
C          CONTROL THE VECTOR E = (E(I)) OF ESTIMATED LOCAL ERRORS
C          IN Y, ACCORDING TO AN INEQUALITY OF THE FORM
C                      MAX-NORM OF ( E(I)/EWT(I) )   .LE.   1,
C          WHERE EWT = (EWT(I)) IS A VECTOR OF POSITIVE ERROR WEIGHTS.
C          THE VALUES OF RTOL AND ATOL SHOULD ALL BE NON-NEGATIVE.
C          THE FOLLOWING TABLE GIVES THE TYPES (SCALAR/ARRAY) OF
C          RTOL AND ATOL, AND THE CORRESPONDING FORM OF EWT(I).
C
C             ITOL    RTOL       ATOL          EWT(I)
C              1     SCALAR     SCALAR     RTOL*ABS(Y(I)) + ATOL
C              2     SCALAR     ARRAY      RTOL*ABS(Y(I)) + ATOL(I)
C              3     ARRAY      SCALAR     RTOL(I)*ABS(Y(I)) + ATOL
C              4     ARRAY      ARRAY      RTOL(I)*ABS(Y(I)) + ATOL(I)
C
C          WHEN EITHER OF THESE PARAMETERS IS A SCALAR, IT NEED NOT
C          BE DIMENSIONED IN THE USER-S CALLING PROGRAM.
C
C          IF NONE OF THE ABOVE CHOICES (WITH ITOL, RTOL, AND ATOL
C          FIXED THROUGHOUT THE PROBLEM) IS SUITABLE, MORE GENERAL
C          ERROR CONTROLS CAN BE OBTAINED BY SUBSTITUTING A 
C          USER-SUPPLIED ROUTINE FOR THE SETTING OF EWT.
C          SEE PART IV BELOW. 
C
C          IF GLOBAL ERRORS ARE TO BE ESTIMATED BY MAKING A REPEATED
C          RUN ON THE SAME PROBLEM WITH SMALLER TOLERANCES, THEN ALL
C          COMPONENTS OF RTOL AND ATOL (I.E. OF EWT) SHOULD BE SCALED 
C          DOWN UNIFORMLY.
C
C ITASK  = AN INDEX SPECIFYING THE TASK TO BE PERFORMED.
C          INPUT ONLY.  ITASK HAS THE FOLLOWING VALUES AND MEANINGS.
C          1  MEANS NORMAL COMPUTATION OF OUTPUT VALUES OF Y(T) AT
C             T = TOUT (BY OVERSHOOTING AND INTERPOLATING). 
C          2  MEANS TAKE ONE STEP ONLY AND RETURN.
C          3  MEANS STOP AT THE FIRST INTERNAL MESH POINT AT OR
C             BEYOND T = TOUT AND RETURN.
C          4  MEANS NORMAL COMPUTATION OF OUTPUT VALUES OF Y(T) AT
C             T = TOUT BUT WITHOUT OVERSHOOTING T = TCRIT.
C             TCRIT MUST BE INPUT AS RWORK(1).  TCRIT MAY BE EQUAL TO 
C             OR BEYOND TOUT, BUT NOT BEHIND IT IN THE DIRECTION OF
C             INTEGRATION.  THIS OPTION IS USEFUL IF THE PROBLEM
C             HAS A SINGULARITY AT OR BEYOND T = TCRIT.
C          5  MEANS TAKE ONE STEP, WITHOUT PASSING TCRIT, AND RETURN. 
C             TCRIT MUST BE INPUT AS RWORK(1).
C
C          NOTE..  IF ITASK = 4 OR 5 AND THE SOLVER REACHES TCRIT
C          (WITHIN ROUNDOFF), IT WILL RETURN T = TCRIT (EXACTLY) TO
C          INDICATE THIS (UNLESS ITASK = 4 AND TOUT COMES BEFORE TCRIT,
C          IN WHICH CASE ANSWERS AT T = TOUT ARE RETURNED FIRST).
C
C ISTATE = AN INDEX USED FOR INPUT AND OUTPUT TO SPECIFY THE
C          THE STATE OF THE CALCULATION.
C
C          ON INPUT, THE VALUES OF ISTATE ARE AS FOLLOWS.
C          1  MEANS THIS IS THE FIRST CALL FOR THE PROBLEM
C             (INITIALIZATIONS WILL BE DONE).  SEE NOTE BELOW.
C          2  MEANS THIS IS NOT THE FIRST CALL, AND THE CALCULATION
C             IS TO CONTINUE NORMALLY, WITH NO CHANGE IN ANY INPUT
C             PARAMETERS EXCEPT POSSIBLY TOUT AND ITASK.
C             (IF ITOL, RTOL, AND/OR ATOL ARE CHANGED BETWEEN CALLS
C             WITH ISTATE = 2, THE NEW VALUES WILL BE USED BUT NOT
C             TESTED FOR LEGALITY.)
C          3  MEANS THIS IS NOT THE FIRST CALL, AND THE
C             CALCULATION IS TO CONTINUE NORMALLY, BUT WITH 
C             A CHANGE IN INPUT PARAMETERS OTHER THAN
C             TOUT AND ITASK.  CHANGES ARE ALLOWED IN
C             NEQ, ITOL, RTOL, ATOL, IOPT, LRW, LIW, JT, ML, MU,
C             AND ANY OPTIONAL INPUTS EXCEPT H0, MXORDN, AND MXORDS.
C             (SEE IWORK DESCRIPTION FOR ML AND MU.)
C             IN ADDITION, IMMEDIATELY FOLLOWING A RETURN WITH
C             ISTATE = 3 (ROOT FOUND), NG AND G MAY BE CHANGED.
C             (BUT CHANGING NG FROM 0 TO .GT. 0 IS NOT ALLOWED.)
C          NOTE..  A PRELIMINARY CALL WITH TOUT = T IS NOT COUNTED
C          AS A FIRST CALL HERE, AS NO INITIALIZATION OR CHECKING OF
C          INPUT IS DONE.  (SUCH A CALL IS SOMETIMES USEFUL FOR THE
C          PURPOSE OF OUTPUTTING THE INITIAL CONDITIONS.)
C          THUS THE FIRST CALL FOR WHICH TOUT .NE. T REQUIRES
C          ISTATE = 1 ON INPUT.
C
C          ON OUTPUT, ISTATE HAS THE FOLLOWING VALUES AND MEANINGS.
C           1  MEANS NOTHING WAS DONE, AS TOUT WAS EQUAL TO T WITH
C              ISTATE = 1 ON INPUT.  (HOWEVER, AN INTERNAL COUNTER WAS
C              SET TO DETECT AND PREVENT REPEATED CALLS OF THIS TYPE.)
C           2  MEANS THE INTEGRATION WAS PERFORMED SUCCESSFULLY, AND
C              NO ROOTS WERE FOUND.
C           3  MEANS THE INTEGRATION WAS SUCCESSFUL, AND ONE OR MORE
C              ROOTS WERE FOUND BEFORE SATISFYING THE STOP CONDITION
C              SPECIFIED BY ITASK.  SEE JROOT.
C          -1  MEANS AN EXCESSIVE AMOUNT OF WORK (MORE THAN MXSTEP
C              STEPS) WAS DONE ON THIS CALL, BEFORE COMPLETING THE
C              REQUESTED TASK, BUT THE INTEGRATION WAS OTHERWISE
C              SUCCESSFUL AS FAR AS T.  (MXSTEP IS AN OPTIONAL INPUT
C              AND IS NORMALLY 500.)  TO CONTINUE, THE USER MAY
C              SIMPLY RESET ISTATE TO A VALUE .GT. 1 AND CALL AGAIN
C              (THE EXCESS WORK STEP COUNTER WILL BE RESET TO 0).
C              IN ADDITION, THE USER MAY INCREASE MXSTEP TO AVOID
C              THIS ERROR RETURN (SEE BELOW ON OPTIONAL INPUTS).
C          -2  MEANS TOO MUCH ACCURACY WAS REQUESTED FOR THE PRECISION
C              OF THE MACHINE BEING USED.  THIS WAS DETECTED BEFORE
C              COMPLETING THE REQUESTED TASK, BUT THE INTEGRATION
C              WAS SUCCESSFUL AS FAR AS T.  TO CONTINUE, THE TOLERANCE
C              PARAMETERS MUST BE RESET, AND ISTATE MUST BE SET
C              TO 3.  THE OPTIONAL OUTPUT TOLSF MAY BE USED FOR THIS
C              PURPOSE.  (NOTE.. IF THIS CONDITION IS DETECTED BEFORE 
C              TAKING ANY STEPS, THEN AN ILLEGAL INPUT RETURN
C              (ISTATE = -3) OCCURS INSTEAD.)
C          -3  MEANS ILLEGAL INPUT WAS DETECTED, BEFORE TAKING ANY
C              INTEGRATION STEPS.  SEE WRITTEN MESSAGE FOR DETAILS.
C              NOTE..  IF THE SOLVER DETECTS AN INFINITE LOOP OF CALLS
C              TO THE SOLVER WITH ILLEGAL INPUT, IT WILL CAUSE
C              THE RUN TO STOP.
C          -4  MEANS THERE WERE REPEATED ERROR TEST FAILURES ON
C              ONE ATTEMPTED STEP, BEFORE COMPLETING THE REQUESTED
C              TASK, BUT THE INTEGRATION WAS SUCCESSFUL AS FAR AS T.
C              THE PROBLEM MAY HAVE A SINGULARITY, OR THE INPUT
C              MAY BE INAPPROPRIATE.
C          -5  MEANS THERE WERE REPEATED CONVERGENCE TEST FAILURES ON 
C              ONE ATTEMPTED STEP, BEFORE COMPLETING THE REQUESTED
C              TASK, BUT THE INTEGRATION WAS SUCCESSFUL AS FAR AS T.
C              THIS MAY BE CAUSED BY AN INACCURATE JACOBIAN MATRIX,
C              IF ONE IS BEING USED.
C          -6  MEANS EWT(I) BECAME ZERO FOR SOME I DURING THE
C              INTEGRATION.  PURE RELATIVE ERROR CONTROL (ATOL(I)=0.0)
C              WAS REQUESTED ON A VARIABLE WHICH HAS NOW VANISHED.
C              THE INTEGRATION WAS SUCCESSFUL AS FAR AS T.
C          -7  MEANS THE LENGTH OF RWORK AND/OR IWORK WAS TOO SMALL TO
C              PROCEED, BUT THE INTEGRATION WAS SUCCESSFUL AS FAR AS T.
C              THIS HAPPENS WHEN LSODAR CHOOSES TO SWITCH METHODS
C              BUT LRW AND/OR LIW IS TOO SMALL FOR THE NEW METHOD.
C
C          NOTE..  SINCE THE NORMAL OUTPUT VALUE OF ISTATE IS 2,
C          IT DOES NOT NEED TO BE RESET FOR NORMAL CONTINUATION.
C          ALSO, SINCE A NEGATIVE INPUT VALUE OF ISTATE WILL BE
C          REGARDED AS ILLEGAL, A NEGATIVE OUTPUT VALUE REQUIRES THE
C          USER TO CHANGE IT, AND POSSIBLY OTHER INPUTS, BEFORE
C          CALLING THE SOLVER AGAIN.
C
C IOPT   = AN INTEGER FLAG TO SPECIFY WHETHER OR NOT ANY OPTIONAL
C          INPUTS ARE BEING USED ON THIS CALL.  INPUT ONLY. 
C          THE OPTIONAL INPUTS ARE LISTED SEPARATELY BELOW. 
C          IOPT = 0 MEANS NO OPTIONAL INPUTS ARE BEING USED.
C                   DEFAULT VALUES WILL BE USED IN ALL CASES.
C          IOPT = 1 MEANS ONE OR MORE OPTIONAL INPUTS ARE BEING USED. 
C
C RWORK  = A REAL ARRAY (DOUBLE PRECISION) FOR WORK SPACE, AND (IN THE
C          FIRST 20 WORDS) FOR CONDITIONAL AND OPTIONAL INPUTS AND
C          OPTIONAL OUTPUTS.
C          AS LSODAR SWITCHES AUTOMATICALLY BETWEEN STIFF AND NONSTIFF
C          METHODS, THE REQUIRED LENGTH OF RWORK CAN CHANGE DURING THE
C          PROBLEM.  THUS THE RWORK ARRAY PASSED TO LSODAR CAN EITHER 
C          HAVE A STATIC (FIXED) LENGTH LARGE ENOUGH FOR BOTH METHODS,
C          OR HAVE A DYNAMIC (CHANGING) LENGTH ALTERED BY THE CALLING 
C          PROGRAM IN RESPONSE TO OUTPUT FROM LSODAR.
C
C                       --- FIXED LENGTH CASE --- 
C          IF THE RWORK LENGTH IS TO BE FIXED, IT SHOULD BE AT LEAST
C               MAX (LRN, LRS),
C          WHERE LRN AND LRS ARE THE RWORK LENGTHS REQUIRED WHEN THE
C          CURRENT METHOD IS NONSTIFF OR STIFF, RESPECTIVELY.
C
C          THE SEPARATE RWORK LENGTH REQUIREMENTS LRN AND LRS ARE
C          AS FOLLOWS..
C          IF NEQ IS CONSTANT AND THE MAXIMUM METHOD ORDERS HAVE
C          THEIR DEFAULT VALUES, THEN
C             LRN = 20 + 16*NEQ + 3*NG, 
C             LRS = 22 + 9*NEQ + NEQ**2 + 3*NG           (JT = 1 OR 2),
C             LRS = 22 + 10*NEQ + (2*ML+MU)*NEQ + 3*NG   (JT = 4 OR 5).
C          UNDER ANY OTHER CONDITIONS, LRN AND LRS ARE GIVEN BY..
C             LRN = 20 + NYH*(MXORDN+1) + 3*NEQ + 3*NG,
C             LRS = 20 + NYH*(MXORDS+1) + 3*NEQ + LMAT + 3*NG,
C          WHERE
C             NYH    = THE INITIAL VALUE OF NEQ,
C             MXORDN = 12, UNLESS A SMALLER VALUE IS GIVEN AS AN
C                      OPTIONAL INPUT,
C             MXORDS = 5, UNLESS A SMALLER VALUE IS GIVEN AS AN
C                      OPTIONAL INPUT,
C             LMAT   = LENGTH OF MATRIX WORK SPACE..
C             LMAT   = NEQ**2 + 2              IF JT = 1 OR 2,
C             LMAT   = (2*ML + MU + 1)*NEQ + 2 IF JT = 4 OR 5.
C
C                       --- DYNAMIC LENGTH CASE ---
C          IF THE LENGTH OF RWORK IS TO BE DYNAMIC, THEN IT SHOULD
C          BE AT LEAST LRN OR LRS, AS DEFINED ABOVE, DEPENDING ON THE 
C          CURRENT METHOD.  INITIALLY, IT MUST BE AT LEAST LRN (SINCE 
C          LSODAR STARTS WITH THE NONSTIFF METHOD).  ON ANY RETURN
C          FROM LSODAR, THE OPTIONAL OUTPUT MCUR INDICATES THE CURRENT
C          METHOD.  IF MCUR DIFFERS FROM THE VALUE IT HAD ON THE
C          PREVIOUS RETURN, OR IF THERE HAS ONLY BEEN ONE CALL TO
C          LSODAR AND MCUR IS NOW 2, THEN LSODAR HAS SWITCHED
C          METHODS DURING THE LAST CALL, AND THE LENGTH OF RWORK
C          SHOULD BE RESET (TO LRN IF MCUR = 1, OR TO LRS IF
C          MCUR = 2).  (AN INCREASE IN THE RWORK LENGTH IS REQUIRED
C          IF LSODAR RETURNED ISTATE = -7, BUT NOT OTHERWISE.)
C          AFTER RESETTING THE LENGTH, CALL LSODAR WITH ISTATE = 3
C          TO SIGNAL THAT CHANGE.
C
C LRW    = THE LENGTH OF THE ARRAY RWORK, AS DECLARED BY THE USER.
C          (THIS WILL BE CHECKED BY THE SOLVER.)
C
C IWORK  = AN INTEGER ARRAY FOR WORK SPACE.
C          AS LSODAR SWITCHES AUTOMATICALLY BETWEEN STIFF AND NONSTIFF
C          METHODS, THE REQUIRED LENGTH OF IWORK CAN CHANGE DURING
C          PROBLEM, BETWEEN
C             LIS = 20 + NEQ   AND   LIN = 20,
C          RESPECTIVELY.  THUS THE IWORK ARRAY PASSED TO LSODAR CAN
C          EITHER HAVE A FIXED LENGTH OF AT LEAST 20 + NEQ, OR HAVE A 
C          DYNAMIC LENGTH OF AT LEAST LIN OR LIS, DEPENDING ON THE
C          CURRENT METHOD.  THE COMMENTS ON DYNAMIC LENGTH UNDER
C          RWORK ABOVE APPLY HERE.  INITIALLY, THIS LENGTH NEED
C          ONLY BE AT LEAST LIN = 20.
C
C          THE FIRST FEW WORDS OF IWORK ARE USED FOR CONDITIONAL AND
C          OPTIONAL INPUTS AND OPTIONAL OUTPUTS.
C
C          THE FOLLOWING 2 WORDS IN IWORK ARE CONDITIONAL INPUTS..
C            IWORK(1) = ML     THESE ARE THE LOWER AND UPPER
C            IWORK(2) = MU     HALF-BANDWIDTHS, RESPECTIVELY, OF THE
C                       BANDED JACOBIAN, EXCLUDING THE MAIN DIAGONAL. 
C                       THE BAND IS DEFINED BY THE MATRIX LOCATIONS
C                       (I,J) WITH I-ML .LE. J .LE. I+MU.  ML AND MU
C                       MUST SATISFY  0 .LE.  ML,MU  .LE. NEQ-1.
C                       THESE ARE REQUIRED IF JT IS 4 OR 5, AND
C                       IGNORED OTHERWISE.  ML AND MU MAY IN FACT BE
C                       THE BAND PARAMETERS FOR A MATRIX TO WHICH
C                       DF/DY IS ONLY APPROXIMATELY EQUAL.
C
C LIW    = THE LENGTH OF THE ARRAY IWORK, AS DECLARED BY THE USER.
C          (THIS WILL BE CHECKED BY THE SOLVER.)
C
C NOTE.. THE BASE ADDRESSES OF THE WORK ARRAYS MUST NOT BE
C ALTERED BETWEEN CALLS TO LSODAR FOR THE SAME PROBLEM.
C THE CONTENTS OF THE WORK ARRAYS MUST NOT BE ALTERED
C BETWEEN CALLS, EXCEPT POSSIBLY FOR THE CONDITIONAL AND
C OPTIONAL INPUTS, AND EXCEPT FOR THE LAST 3*NEQ WORDS OF RWORK.
C THE LATTER SPACE IS USED FOR INTERNAL SCRATCH SPACE, AND SO IS
C AVAILABLE FOR USE BY THE USER OUTSIDE LSODAR BETWEEN CALLS, IF
C DESIRED (BUT NOT FOR USE BY F, JAC, OR G).
C
C JAC    = THE NAME OF THE USER-SUPPLIED ROUTINE TO COMPUTE THE
C          JACOBIAN MATRIX, DF/DY, IF JT = 1 OR 4.  THE JAC ROUTINE
C          IS OPTIONAL, BUT IF THE PROBLEM IS EXPECTED TO BE STIFF MUCH
C          OF THE TIME, YOU ARE ENCOURAGED TO SUPPLY JAC, FOR THE SAKE
C          OF EFFICIENCY.  (ALTERNATIVELY, SET JT = 2 OR 5 TO HAVE
C          LSODAR COMPUTE DF/DY INTERNALLY BY DIFFERENCE QUOTIENTS.)
C          IF AND WHEN LSODAR USES DF/DY, IF TREATS THIS NEQ BY NEQ
C          MATRIX EITHER AS FULL (JT = 1 OR 2), OR AS BANDED (JT =
C          4 OR 5) WITH HALF-BANDWIDTHS ML AND MU (DISCUSSED UNDER
C          IWORK ABOVE).  IN EITHER CASE, IF JT = 1 OR 4, THE JAC
C          ROUTINE MUST COMPUTE DF/DY AS A FUNCTION OF THE SCALAR T
C          AND THE VECTOR Y.  IT IS TO HAVE THE FORM
C               SUBROUTINE JAC (NEQ, T, Y, ML, MU, PD, NROWPD)
C               DIMENSION Y(1), PD(NROWPD,1)
C          WHERE NEQ, T, Y, ML, MU, AND NROWPD ARE INPUT AND THE ARRAY
C          PD IS TO BE LOADED WITH PARTIAL DERIVATIVES (ELEMENTS OF
C          THE JACOBIAN MATRIX) ON OUTPUT.  PD MUST BE GIVEN A FIRST
C          DIMENSION OF NROWPD.  T AND Y HAVE THE SAME MEANING AS IN
C          SUBROUTINE F.  (IN THE DIMENSION STATEMENT ABOVE, 1 IS A
C          DUMMY DIMENSION.. IT CAN BE REPLACED BY ANY VALUE.)
C               IN THE FULL MATRIX CASE (JT = 1), ML AND MU ARE
C          IGNORED, AND THE JACOBIAN IS TO BE LOADED INTO PD IN
C          COLUMNWISE MANNER, WITH DF(I)/DY(J) LOADED INTO PD(I,J).
C               IN THE BAND MATRIX CASE (JT = 4), THE ELEMENTS
C          WITHIN THE BAND ARE TO BE LOADED INTO PD IN COLUMNWISE
C          MANNER, WITH DIAGONAL LINES OF DF/DY LOADED INTO THE ROWS
C          OF PD.  THUS DF(I)/DY(J) IS TO BE LOADED INTO PD(I-J+MU+1,J).
C          ML AND MU ARE THE HALF-BANDWIDTH PARAMETERS (SEE IWORK).
C          THE LOCATIONS IN PD IN THE TWO TRIANGULAR AREAS WHICH
C          CORRESPOND TO NONEXISTENT MATRIX ELEMENTS CAN BE IGNORED
C          OR LOADED ARBITRARILY, AS THEY ARE OVERWRITTEN BY LSODAR.
C               JAC NEED NOT PROVIDE DF/DY EXACTLY.  A CRUDE
C          APPROXIMATION (POSSIBLY WITH A SMALLER BANDWIDTH) WILL DO. 
C               IN EITHER CASE, PD IS PRESET TO ZERO BY THE SOLVER,
C          SO THAT ONLY THE NONZERO ELEMENTS NEED BE LOADED BY JAC.
C          EACH CALL TO JAC IS PRECEDED BY A CALL TO F WITH THE SAME
C          ARGUMENTS NEQ, T, AND Y.  THUS TO GAIN SOME EFFICIENCY,
C          INTERMEDIATE QUANTITIES SHARED BY BOTH CALCULATIONS MAY BE 
C          SAVED IN A USER COMMON BLOCK BY F AND NOT RECOMPUTED BY JAC,
C          IF DESIRED.  ALSO, JAC MAY ALTER THE Y ARRAY, IF DESIRED.
C          JAC MUST BE DECLARED EXTERNAL IN THE CALLING PROGRAM.
C               SUBROUTINE JAC MAY ACCESS USER-DEFINED QUANTITIES IN
C          NEQ(2),... AND/OR IN Y(NEQ(1)+1),... IF NEQ IS AN ARRAY
C          (DIMENSIONED IN JAC) AND/OR Y HAS LENGTH EXCEEDING NEQ(1). 
C          SEE THE DESCRIPTIONS OF NEQ AND Y ABOVE.
C
C JT     = JACOBIAN TYPE INDICATOR.  USED ONLY FOR INPUT.
C          JT SPECIFIES HOW THE JACOBIAN MATRIX DF/DY WILL BE
C          TREATED, IF AND WHEN LSODAR REQUIRES THIS MATRIX.
C          JT HAS THE FOLLOWING VALUES AND MEANINGS..
C           1 MEANS A USER-SUPPLIED FULL (NEQ BY NEQ) JACOBIAN.
C           2 MEANS AN INTERNALLY GENERATED (DIFFERENCE QUOTIENT) FULL
C             JACOBIAN (USING NEQ EXTRA CALLS TO F PER DF/DY VALUE).
C           4 MEANS A USER-SUPPLIED BANDED JACOBIAN.
C           5 MEANS AN INTERNALLY GENERATED BANDED JACOBIAN (USING
C             ML+MU+1 EXTRA CALLS TO F PER DF/DY EVALUATION).
C          IF JT = 1 OR 4, THE USER MUST SUPPLY A SUBROUTINE JAC
C          (THE NAME IS ARBITRARY) AS DESCRIBED ABOVE UNDER JAC.
C          IF JT = 2 OR 5, A DUMMY ARGUMENT CAN BE USED.
C
C G      = THE NAME OF SUBROUTINE FOR CONSTRAINT FUNCTIONS, WHOSE
C          ROOTS ARE DESIRED DURING THE INTEGRATION.  IT IS TO HAVE
C          THE FORM 
C               SUBROUTINE G (NEQ, T, Y, NG, GOUT)
C               DIMENSION Y(NEQ), GOUT(NG)
C          WHERE NEQ, T, Y, AND NG ARE INPUT, AND THE ARRAY GOUT
C          IS OUTPUT.  NEQ, T, AND Y HAVE THE SAME MEANING AS IN
C          THE F ROUTINE, AND GOUT IS AN ARRAY OF LENGTH NG.
C          FOR I = 1,...,NG, THIS ROUTINE IS TO LOAD INTO GOUT(I)
C          THE VALUE AT (T,Y) OF THE I-TH CONSTRAINT FUNCTION G(I).
C          LSODAR WILL FIND ROOTS OF THE G(I) OF ODD MULTIPLICITY
C          (I.E. SIGN CHANGES) AS THEY OCCUR DURING THE INTEGRATION.
C          G MUST BE DECLARED EXTERNAL IN THE CALLING PROGRAM.
C
C          CAUTION.. BECAUSE OF NUMERICAL ERRORS IN THE FUNCTIONS
C          G(I) DUE TO ROUNDOFF AND INTEGRATION ERROR, LSODAR MAY
C          RETURN FALSE ROOTS, OR RETURN THE SAME ROOT AT TWO OR MORE 
C          NEARLY EQUAL VALUES OF T.  IF SUCH FALSE ROOTS ARE
C          SUSPECTED, THE USER SHOULD CONSIDER SMALLER ERROR TOLERANCES
C          AND/OR HIGHER PRECISION IN THE EVALUATION OF THE G(I).
C
C          IF A ROOT OF SOME G(I) DEFINES THE END OF THE PROBLEM,
C          THE INPUT TO LSODAR SHOULD NEVERTHELESS ALLOW INTEGRATION
C          TO A POINT SLIGHTLY PAST THAT ROOT, SO THAT LSODAR CAN
C          LOCATE THE ROOT BY INTERPOLATION.
C
C          SUBROUTINE G MAY ACCESS USER-DEFINED QUANTITIES IN
C          NEQ(2),... AND Y(NEQ(1)+1),... IF NEQ IS AN ARRAY
C          (DIMENSIONED IN G) AND Y HAS LENGTH EXCEEDING NEQ(1).
C          SEE THE DESCRIPTIONS OF NEQ AND Y ABOVE.
C
C NG     = NUMBER OF CONSTRAINT FUNCTIONS G(I).  IF THERE ARE NONE,
C          SET NG = 0, AND PASS A DUMMY NAME FOR G.
C
C JROOT  = INTEGER ARRAY OF LENGTH NG.  USED ONLY FOR OUTPUT.
C          ON A RETURN WITH ISTATE = 3 (ONE OR MORE ROOTS FOUND),
C          JROOT(I) = 1 IF G(I) HAS A ROOT AT T, OR JROOT(I) = 0 IF NOT.
C-----------------------------------------------------------------------
C OPTIONAL INPUTS.
C
C THE FOLLOWING IS A LIST OF THE OPTIONAL INPUTS PROVIDED FOR IN THE
C CALL SEQUENCE.  (SEE ALSO PART II.)  FOR EACH SUCH INPUT VARIABLE,
C THIS TABLE LISTS ITS NAME AS USED IN THIS DOCUMENTATION, ITS
C LOCATION IN THE CALL SEQUENCE, ITS MEANING, AND THE DEFAULT VALUE.
C THE USE OF ANY OF THESE INPUTS REQUIRES IOPT = 1, AND IN THAT
C CASE ALL OF THESE INPUTS ARE EXAMINED.  A VALUE OF ZERO FOR ANY
C OF THESE OPTIONAL INPUTS WILL CAUSE THE DEFAULT VALUE TO BE USED.
C THUS TO USE A SUBSET OF THE OPTIONAL INPUTS, SIMPLY PRELOAD
C LOCATIONS 5 TO 10 IN RWORK AND IWORK TO 0.0 AND 0 RESPECTIVELY, AND 
C THEN SET THOSE OF INTEREST TO NONZERO VALUES.
C
C NAME    LOCATION      MEANING AND DEFAULT VALUE 
C
C H0      RWORK(5)  THE STEP SIZE TO BE ATTEMPTED ON THE FIRST STEP.
C                   THE DEFAULT VALUE IS DETERMINED BY THE SOLVER.
C
C HMAX    RWORK(6)  THE MAXIMUM ABSOLUTE STEP SIZE ALLOWED. 
C                   THE DEFAULT VALUE IS INFINITE.
C
C HMIN    RWORK(7)  THE MINIMUM ABSOLUTE STEP SIZE ALLOWED. 
C                   THE DEFAULT VALUE IS 0.  (THIS LOWER BOUND IS NOT 
C                   ENFORCED ON THE FINAL STEP BEFORE REACHING TCRIT
C                   WHEN ITASK = 4 OR 5.)
C
C IXPR    IWORK(5)  FLAG TO GENERATE EXTRA PRINTING AT METHOD SWITCHES.
C                   IXPR = 0 MEANS NO EXTRA PRINTING (THE DEFAULT).
C                   IXPR = 1 MEANS PRINT DATA ON EACH SWITCH.
C                   T, H, AND NST WILL BE PRINTED ON THE SAME LOGICAL 
C                   UNIT AS USED FOR ERROR MESSAGES.
C
C MXSTEP  IWORK(6)  MAXIMUM NUMBER OF (INTERNALLY DEFINED) STEPS
C                   ALLOWED DURING ONE CALL TO THE SOLVER.
C                   THE DEFAULT VALUE IS 500.
C
C MXHNIL  IWORK(7)  MAXIMUM NUMBER OF MESSAGES PRINTED (PER PROBLEM)
C                   WARNING THAT T + H = T ON A STEP (H = STEP SIZE). 
C                   THIS MUST BE POSITIVE TO RESULT IN A NON-DEFAULT
C                   VALUE.  THE DEFAULT VALUE IS 10.
C
C MXORDN  IWORK(8)  THE MAXIMUM ORDER TO BE ALLOWED FOR THE NONSTIFF
C                   (ADAMS) METHOD.  THE DEFAULT VALUE IS 12.
C                   IF MXORDN EXCEEDS THE DEFAULT VALUE, IT WILL
C                   BE REDUCED TO THE DEFAULT VALUE.
C                   MXORDN IS HELD CONSTANT DURING THE PROBLEM.
C
C MXORDS  IWORK(9)  THE MAXIMUM ORDER TO BE ALLOWED FOR THE STIFF
C                   (BDF) METHOD.  THE DEFAULT VALUE IS 5.
C                   IF MXORDS EXCEEDS THE DEFAULT VALUE, IT WILL
C                   BE REDUCED TO THE DEFAULT VALUE.
C                   MXORDS IS HELD CONSTANT DURING THE PROBLEM.
C-----------------------------------------------------------------------
C OPTIONAL OUTPUTS. 
C
C AS OPTIONAL ADDITIONAL OUTPUT FROM LSODAR, THE VARIABLES LISTED
C BELOW ARE QUANTITIES RELATED TO THE PERFORMANCE OF LSODAR 
C WHICH ARE AVAILABLE TO THE USER.  THESE ARE COMMUNICATED BY WAY OF
C THE WORK ARRAYS, BUT ALSO HAVE INTERNAL MNEMONIC NAMES AS SHOWN.
C EXCEPT WHERE STATED OTHERWISE, ALL OF THESE OUTPUTS ARE DEFINED
C ON ANY SUCCESSFUL RETURN FROM LSODAR, AND ON ANY RETURN WITH
C ISTATE = -1, -2, -4, -5, OR -6.  ON AN ILLEGAL INPUT RETURN
C (ISTATE = -3), THEY WILL BE UNCHANGED FROM THEIR EXISTING VALUES
C (IF ANY), EXCEPT POSSIBLY FOR TOLSF, LENRW, AND LENIW.
C ON ANY ERROR RETURN, OUTPUTS RELEVANT TO THE ERROR WILL BE DEFINED, 
C AS NOTED BELOW.
C
C NAME    LOCATION      MEANING
C
C HU      RWORK(11) THE STEP SIZE IN T LAST USED (SUCCESSFULLY).
C
C HCUR    RWORK(12) THE STEP SIZE TO BE ATTEMPTED ON THE NEXT STEP.
C
C TCUR    RWORK(13) THE CURRENT VALUE OF THE INDEPENDENT VARIABLE
C                   WHICH THE SOLVER HAS ACTUALLY REACHED, I.E. THE
C                   CURRENT INTERNAL MESH POINT IN T.  ON OUTPUT, TCUR
C                   WILL ALWAYS BE AT LEAST AS FAR AS THE ARGUMENT
C                   T, BUT MAY BE FARTHER (IF INTERPOLATION WAS DONE).
C
C TOLSF   RWORK(14) A TOLERANCE SCALE FACTOR, GREATER THAN 1.0,
C                   COMPUTED WHEN A REQUEST FOR TOO MUCH ACCURACY WAS 
C                   DETECTED (ISTATE = -3 IF DETECTED AT THE START OF 
C                   THE PROBLEM, ISTATE = -2 OTHERWISE).  IF ITOL IS
C                   LEFT UNALTERED BUT RTOL AND ATOL ARE UNIFORMLY
C                   SCALED UP BY A FACTOR OF TOLSF FOR THE NEXT CALL, 
C                   THEN THE SOLVER IS DEEMED LIKELY TO SUCCEED.
C                   (THE USER MAY ALSO IGNORE TOLSF AND ALTER THE
C                   TOLERANCE PARAMETERS IN ANY OTHER WAY APPROPRIATE.)
C
C TSW     RWORK(15) THE VALUE OF T AT THE TIME OF THE LAST METHOD
C                   SWITCH, IF ANY.
C
C NGE     IWORK(10) THE NUMBER OF G EVALUATIONS FOR THE PROBLEM SO FAR.
C
C NST     IWORK(11) THE NUMBER OF STEPS TAKEN FOR THE PROBLEM SO FAR. 
C
C NFE     IWORK(12) THE NUMBER OF F EVALUATIONS FOR THE PROBLEM SO FAR.
C
C NJE     IWORK(13) THE NUMBER OF JACOBIAN EVALUATIONS (AND OF MATRIX 
C                   LU DECOMPOSITIONS) FOR THE PROBLEM SO FAR.
C
C NQU     IWORK(14) THE METHOD ORDER LAST USED (SUCCESSFULLY).
C
C NQCUR   IWORK(15) THE ORDER TO BE ATTEMPTED ON THE NEXT STEP.
C
C IMXER   IWORK(16) THE INDEX OF THE COMPONENT OF LARGEST MAGNITUDE IN
C                   THE WEIGHTED LOCAL ERROR VECTOR ( E(I)/EWT(I) ),
C                   ON AN ERROR RETURN WITH ISTATE = -4 OR -5.
C
C LENRW   IWORK(17) THE LENGTH OF RWORK ACTUALLY REQUIRED, ASSUMING
C                   THAT THE LENGTH OF RWORK IS TO BE FIXED FOR THE
C                   REST OF THE PROBLEM, AND THAT SWITCHING MAY OCCUR.
C                   THIS IS DEFINED ON NORMAL RETURNS AND ON AN ILLEGAL
C                   INPUT RETURN FOR INSUFFICIENT STORAGE.
C
C LENIW   IWORK(18) THE LENGTH OF IWORK ACTUALLY REQUIRED, ASSUMING
C                   THAT THE LENGTH OF IWORK IS TO BE FIXED FOR THE
C                   REST OF THE PROBLEM, AND THAT SWITCHING MAY OCCUR.
C                   THIS IS DEFINED ON NORMAL RETURNS AND ON AN ILLEGAL
C                   INPUT RETURN FOR INSUFFICIENT STORAGE.
C
C MUSED   IWORK(19) THE METHOD INDICATOR FOR THE LAST SUCCESSFUL STEP..
C                   1 MEANS ADAMS (NONSTIFF), 2 MEANS BDF (STIFF).
C
C MCUR    IWORK(20) THE CURRENT METHOD INDICATOR..
C                   1 MEANS ADAMS (NONSTIFF), 2 MEANS BDF (STIFF).
C                   THIS IS THE METHOD TO BE ATTEMPTED
C                   ON THE NEXT STEP.  THUS IT DIFFERS FROM MUSED
C                   ONLY IF A METHOD SWITCH HAS JUST BEEN MADE.
C
C THE FOLLOWING TWO ARRAYS ARE SEGMENTS OF THE RWORK ARRAY WHICH
C MAY ALSO BE OF INTEREST TO THE USER AS OPTIONAL OUTPUTS.
C FOR EACH ARRAY, THE TABLE BELOW GIVES ITS INTERNAL NAME,
C ITS BASE ADDRESS IN RWORK, AND ITS DESCRIPTION. 
C
C NAME    BASE ADDRESS      DESCRIPTION 
C
C YH      21 + 3*NG      THE NORDSIECK HISTORY ARRAY, OF SIZE NYH BY
C                        (NQCUR + 1), WHERE NYH IS THE INITIAL VALUE
C                        OF NEQ.  FOR J = 0,1,...,NQCUR, COLUMN J+1
C                        OF YH CONTAINS HCUR**J/FACTORIAL(J) TIMES
C                        THE J-TH DERIVATIVE OF THE INTERPOLATING
C                        POLYNOMIAL CURRENTLY REPRESENTING THE SOLUTION,
C                        EVALUATED AT T = TCUR.
C
C ACOR     LACOR         ARRAY OF SIZE NEQ USED FOR THE ACCUMULATED
C         (FROM COMMON   CORRECTIONS ON EACH STEP, SCALED ON OUTPUT
C           AS NOTED)    TO REPRESENT THE ESTIMATED LOCAL ERROR IN Y
C                        ON THE LAST STEP.  THIS IS THE VECTOR E IN
C                        THE DESCRIPTION OF THE ERROR CONTROL.  IT IS 
C                        DEFINED ONLY ON A SUCCESSFUL RETURN FROM
C                        LSODAR.  THE BASE ADDRESS LACOR IS OBTAINED BY
C                        INCLUDING IN THE USER-S PROGRAM THE
C                        FOLLOWING 3 LINES..
C                           DOUBLE PRECISION RLS
C                           COMMON /LS0001/ RLS(218), ILS(39)
C                           LACOR = ILS(5)
C
C-----------------------------------------------------------------------
C PART II.  OTHER ROUTINES CALLABLE.
C
C THE FOLLOWING ARE OPTIONAL CALLS WHICH THE USER MAY MAKE TO
C GAIN ADDITIONAL CAPABILITIES IN CONJUNCTION WITH LSODAR.
C (THE ROUTINES XSETUN AND XSETF ARE DESIGNED TO CONFORM TO THE
C SLATEC ERROR HANDLING PACKAGE.)
C
C     FORM OF CALL                  FUNCTION
C   CALL XSETUN(LUN)          SET THE LOGICAL UNIT NUMBER, LUN, FOR
C                             OUTPUT OF MESSAGES FROM LSODAR, IF
C                             THE DEFAULT IS NOT DESIRED.
C                             THE DEFAULT VALUE OF LUN IS 6.
C
C   CALL XSETF(MFLAG)         SET A FLAG TO CONTROL THE PRINTING OF
C                             MESSAGES BY LSODAR. 
C                             MFLAG = 0 MEANS DO NOT PRINT. (DANGER.. 
C                             THIS RISKS LOSING VALUABLE INFORMATION.)
C                             MFLAG = 1 MEANS PRINT (THE DEFAULT).
C
C                             EITHER OF THE ABOVE CALLS MAY BE MADE AT
C                             ANY TIME AND WILL TAKE EFFECT IMMEDIATELY.
C
C   CALL SRCAR(RSAV,ISAV,JOB) SAVES AND RESTORES THE CONTENTS OF
C                             THE INTERNAL COMMON BLOCKS USED BY
C                             LSODAR (SEE PART III BELOW).
C                             RSAV MUST BE A REAL ARRAY OF LENGTH 245 
C                             OR MORE, AND ISAV MUST BE AN INTEGER
C                             ARRAY OF LENGTH 59 OR MORE.
C                             JOB=1 MEANS SAVE COMMON INTO RSAV/ISAV. 
C                             JOB=2 MEANS RESTORE COMMON FROM RSAV/ISAV.
C                                SRCAR IS USEFUL IF ONE IS
C                             INTERRUPTING A RUN AND RESTARTING
C                             LATER, OR ALTERNATING BETWEEN TWO OR
C                             MORE PROBLEMS SOLVED WITH LSODAR.
C
C   CALL INTDY(,,,,,)         PROVIDE DERIVATIVES OF Y, OF VARIOUS
C        (SEE BELOW)          ORDERS, AT A SPECIFIED POINT T, IF
C                             DESIRED.  IT MAY BE CALLED ONLY AFTER
C                             A SUCCESSFUL RETURN FROM LSODAR.
C
C THE DETAILED INSTRUCTIONS FOR USING INTDY ARE AS FOLLOWS. 
C THE FORM OF THE CALL IS..
C
C   CALL INTDY (T, K, RWORK(LYH), NYH, DKY, IFLAG)
C
C THE INPUT PARAMETERS ARE..
C
C T         = VALUE OF INDEPENDENT VARIABLE WHERE ANSWERS ARE DESIRED 
C             (NORMALLY THE SAME AS THE T LAST RETURNED BY LSODAR).
C             FOR VALID RESULTS, T MUST LIE BETWEEN TCUR - HU AND TCUR.
C             (SEE OPTIONAL OUTPUTS FOR TCUR AND HU.)
C K         = INTEGER ORDER OF THE DERIVATIVE DESIRED.  K MUST SATISFY
C             0 .LE. K .LE. NQCUR, WHERE NQCUR IS THE CURRENT ORDER
C             (SEE OPTIONAL OUTPUTS).  THE CAPABILITY CORRESPONDING
C             TO K = 0, I.E. COMPUTING Y(T), IS ALREADY PROVIDED
C             BY LSODAR DIRECTLY.  SINCE NQCUR .GE. 1, THE FIRST
C             DERIVATIVE DY/DT IS ALWAYS AVAILABLE WITH INTDY.
C LYH       = 21 + 3*NG = BASE ADDRESS IN RWORK OF THE HISTORY ARRAY YH.
C NYH       = COLUMN LENGTH OF YH, EQUAL TO THE INITIAL VALUE OF NEQ. 
C
C THE OUTPUT PARAMETERS ARE.. 
C
C DKY       = A REAL ARRAY OF LENGTH NEQ CONTAINING THE COMPUTED VALUE
C             OF THE K-TH DERIVATIVE OF Y(T).
C IFLAG     = INTEGER FLAG, RETURNED AS 0 IF K AND T WERE LEGAL,
C             -1 IF K WAS ILLEGAL, AND -2 IF T WAS ILLEGAL. 
C             ON AN ERROR RETURN, A MESSAGE IS ALSO WRITTEN.
C-----------------------------------------------------------------------
C PART III.  COMMON BLOCKS.
C
C IF LSODAR IS TO BE USED IN AN OVERLAY SITUATION, THE USER 
C MUST DECLARE, IN THE PRIMARY OVERLAY, THE VARIABLES IN..
C   (1) THE CALL SEQUENCE TO LSODAR,
C   (2) THE FOUR INTERNAL COMMON BLOCKS 
C         /LS0001/  OF LENGTH  257  (218 DOUBLE PRECISION WORDS
C                         FOLLOWED BY 39 INTEGER WORDS),
C         /LSA001/  OF LENGTH  31    (22 DOUBLE PRECISION WORDS
C                         FOLLOWED BY  9 INTEGER WORDS),
C         /LSR001/  OF LENGTH  14     (5 DOUBLE PRECISION WORDS
C                         FOLLOWED BY  9 INTEGER WORDS),
C         /EH0001/  OF LENGTH  2 (INTEGER WORDS). 
C
C IF LSODAR IS USED ON A SYSTEM IN WHICH THE CONTENTS OF INTERNAL
C COMMON BLOCKS ARE NOT PRESERVED BETWEEN CALLS, THE USER SHOULD
C DECLARE THE ABOVE COMMON BLOCKS IN HIS MAIN PROGRAM TO INSURE
C THAT THEIR CONTENTS ARE PRESERVED.
C
C IF THE SOLUTION OF A GIVEN PROBLEM BY LSODAR IS TO BE INTERRUPTED
C AND THEN LATER CONTINUED, SUCH AS WHEN RESTARTING AN INTERRUPTED RUN
C OR ALTERNATING BETWEEN TWO OR MORE PROBLEMS, THE USER SHOULD SAVE,
C FOLLOWING THE RETURN FROM THE LAST LSODAR CALL PRIOR TO THE
C INTERRUPTION, THE CONTENTS OF THE CALL SEQUENCE VARIABLES AND THE
C INTERNAL COMMON BLOCKS, AND LATER RESTORE THESE VALUES BEFORE THE
C NEXT LSODAR CALL FOR THAT PROBLEM.  TO SAVE AND RESTORE THE COMMON
C BLOCKS, USE SUBROUTINE SRCAR (SEE PART II ABOVE).
C
C-----------------------------------------------------------------------
C PART IV.  OPTIONALLY REPLACEABLE SOLVER ROUTINES.
C
C BELOW IS A DESCRIPTION OF A ROUTINE IN THE LSODAR PACKAGE WHICH
C RELATES TO THE MEASUREMENT OF ERRORS, AND CAN BE
C REPLACED BY A USER-SUPPLIED VERSION, IF DESIRED.  HOWEVER, SINCE SUCH
C A REPLACEMENT MAY HAVE A MAJOR IMPACT ON PERFORMANCE, IT SHOULD BE
C DONE ONLY WHEN ABSOLUTELY NECESSARY, AND ONLY WITH GREAT CAUTION.
C (NOTE.. THE MEANS BY WHICH THE PACKAGE VERSION OF A ROUTINE IS
C SUPERSEDED BY THE USER-S VERSION MAY BE SYSTEM-DEPENDENT.)
C
C (A) EWSET.
C THE FOLLOWING SUBROUTINE IS CALLED JUST BEFORE EACH INTERNAL
C INTEGRATION STEP, AND SETS THE ARRAY OF ERROR WEIGHTS, EWT, AS
C DESCRIBED UNDER ITOL/RTOL/ATOL ABOVE..
C     SUBROUTINE EWSET (NEQ, ITOL, RTOL, ATOL, YCUR, EWT)
C WHERE NEQ, ITOL, RTOL, AND ATOL ARE AS IN THE LSODAR CALL SEQUENCE, 
C YCUR CONTAINS THE CURRENT DEPENDENT VARIABLE VECTOR, AND
C EWT IS THE ARRAY OF WEIGHTS SET BY EWSET.
C
C IF THE USER SUPPLIES THIS SUBROUTINE, IT MUST RETURN IN EWT(I)
C (I = 1,...,NEQ) A POSITIVE QUANTITY SUITABLE FOR COMPARING ERRORS
C IN Y(I) TO.  THE EWT ARRAY RETURNED BY EWSET IS PASSED TO THE
C VMNORM ROUTINE, AND ALSO USED BY LSODAR IN THE COMPUTATION
C OF THE OPTIONAL OUTPUT IMXER, AND THE INCREMENTS FOR DIFFERENCE
C QUOTIENT JACOBIANS.
C
C IN THE USER-SUPPLIED VERSION OF EWSET, IT MAY BE DESIRABLE TO USE
C THE CURRENT VALUES OF DERIVATIVES OF Y.  DERIVATIVES UP TO ORDER NQ 
C ARE AVAILABLE FROM THE HISTORY ARRAY YH, DESCRIBED ABOVE UNDER
C OPTIONAL OUTPUTS.  IN EWSET, YH IS IDENTICAL TO THE YCUR ARRAY,
C EXTENDED TO NQ + 1 COLUMNS WITH A COLUMN LENGTH OF NYH AND SCALE
C FACTORS OF H**J/FACTORIAL(J).  ON THE FIRST CALL FOR THE PROBLEM,
C GIVEN BY NST = 0, NQ IS 1 AND H IS TEMPORARILY SET TO 1.0.
C THE QUANTITIES NQ, NYH, H, AND NST CAN BE OBTAINED BY INCLUDING
C IN EWSET THE STATEMENTS..
C     DOUBLE PRECISION H, RLS 
C     COMMON /LS0001/ RLS(218),ILS(39)
C     NQ = ILS(35)
C     NYH = ILS(14) 
C     NST = ILS(36) 
C     H = RLS(212)
C THUS, FOR EXAMPLE, THE CURRENT VALUE OF DY/DT CAN BE OBTAINED AS
C YCUR(NYH+I)/H  (I=1,...,NEQ)  (AND THE DIVISION BY H IS
C UNNECESSARY WHEN NST = 0).
C-----------------------------------------------------------------------
C-----------------------------------------------------------------------
C OTHER ROUTINES IN THE LSODAR PACKAGE. 
C
C IN ADDITION TO SUBROUTINE LSODAR, THE LSODAR PACKAGE INCLUDES THE
C FOLLOWING SUBROUTINES AND FUNCTION ROUTINES..
C  RCHEK    DOES PRELIMINARY CHECKING FOR ROOTS, AND SERVES AS AN
C           INTERFACE BETWEEN SUBROUTINE LSODAR AND SUBROUTINE ROOTS. 
C  ROOTS    FINDS THE LEFTMOST ROOT OF A SET OF FUNCTIONS.
C  INTDY    COMPUTES AN INTERPOLATED VALUE OF THE Y VECTOR AT T = TOUT.
C  STODA    IS THE CORE INTEGRATOR, WHICH DOES ONE STEP OF THE
C           INTEGRATION AND THE ASSOCIATED ERROR CONTROL.
C  CFODE    SETS ALL METHOD COEFFICIENTS AND TEST CONSTANTS.
C  PRJA     COMPUTES AND PREPROCESSES THE JACOBIAN MATRIX J = DF/DY
C           AND THE NEWTON ITERATION MATRIX P = I - H*L0*J. 
C  SOLSY    MANAGES SOLUTION OF LINEAR SYSTEM IN CHORD ITERATION.
C  EWSET    SETS THE ERROR WEIGHT VECTOR EWT BEFORE EACH STEP.
C  VMNORM   COMPUTES THE WEIGHTED MAX-NORM OF A VECTOR.
C  FNORM    COMPUTES THE NORM OF A FULL MATRIX CONSISTENT WITH THE
C           WEIGHTED MAX-NORM ON VECTORS.
C  BNORM    COMPUTES THE NORM OF A BAND MATRIX CONSISTENT WITH THE
C           WEIGHTED MAX-NORM ON VECTORS.
C  SRCAR    IS A USER-CALLABLE ROUTINE TO SAVE AND RESTORE
C           THE CONTENTS OF THE INTERNAL COMMON BLOCKS.
C  DGEFA AND DGESL   ARE ROUTINES FROM LINPACK FOR SOLVING FULL
C           SYSTEMS OF LINEAR ALGEBRAIC EQUATIONS.
C  DGBFA AND DGBSL   ARE ROUTINES FROM LINPACK FOR SOLVING BANDED
C           LINEAR SYSTEMS.
C  DAXPY, DSCAL, IDAMAX, DDOT, AND DCOPY   ARE BASIC LINEAR ALGEBRA
C           MODULES (BLAS) USED BY THE ABOVE LINPACK ROUTINES.
C  D1MACH   COMPUTES THE UNIT ROUNDOFF IN A MACHINE-INDEPENDENT MANNER.
C  XERRWV, XSETUN, AND XSETF   HANDLE THE PRINTING OF ALL ERROR
C           MESSAGES AND WARNINGS.  XERRWV IS MACHINE-DEPENDENT.
C NOTE..  VMNORM, FNORM, BNORM, IDAMAX, DDOT, AND D1MACH ARE FUNCTION 
C ROUTINES.  ALL THE OTHERS ARE SUBROUTINES.
C
C THE INTRINSIC AND EXTERNAL ROUTINES USED BY LSODAR ARE..
C DABS, DMAX1, DMIN1, DBLE, MAX0, MIN0, MOD, DSIGN, DSQRT, AND WRITE. 
C
C A BLOCK DATA SUBPROGRAM IS ALSO INCLUDED WITH THE PACKAGE,
C FOR LOADING SOME OF THE VARIABLES IN INTERNAL COMMON.
C
C-----------------------------------------------------------------------
C THE FOLLOWING CARD IS FOR OPTIMIZED COMPILATION ON LLL COMPILERS.
CLLL. OPTIMIZE
C-----------------------------------------------------------------------
      EXTERNAL PRJA, SOLSY
      INTEGER ILLIN, INIT, LYH, LEWT, LACOR, LSAVF, LWM, LIWM,
     1   MXSTEP, MXHNIL, NHNIL, NTREP, NSLAST, NYH, IOWNS
      INTEGER ICF, IERPJ, IERSL, JCUR, JSTART, KFLAG, L, METH, MITER, 
     1   MAXORD, MAXCOR, MSBP, MXNCF, N, NQ, NST, NFE, NJE, NQU
      INTEGER INSUFR, INSUFI, IXPR, IOWNS2, JTYP, MUSED, MXORDN, MXORDS
      INTEGER LG0, LG1, LGX, IOWNR3, IRFND, ITASKC, NGC, NGE
      INTEGER I, I1, I2, IFLAG, IMXER, KGO, LF0,
     1   LENIW, LENRW, LENWM, ML, MORD, MU, MXHNL0, MXSTP0
      INTEGER LEN1, LEN1C, LEN1N, LEN1S, LEN2, LENIWC,
     1   LENRWC, LENRWN, LENRWS
      INTEGER IRFP, IRT, LENYH, LYHNEW
      DOUBLE PRECISION ROWNS, 
     1   CCMAX, EL0, H, HMIN, HMXI, HU, RC, TN, UROUND
      DOUBLE PRECISION TSW, ROWNS2, PDNORM
      DOUBLE PRECISION ROWNR3, T0, TLAST, TOUTC
      DOUBLE PRECISION ATOLI, AYI, BIG, EWTI, H0, HMAX, HMX, RH, RTOLI,
     1   TCRIT, TDIST, TNEXT, TOL, TOLSF, TP, SIZE, SUM, W0,
     2   D1MACH, VMNORM
      DIMENSION MORD(2)
      LOGICAL IHIT
C-----------------------------------------------------------------------
C THE FOLLOWING THREE INTERNAL COMMON BLOCKS CONTAIN
C (A) VARIABLES WHICH ARE LOCAL TO ANY SUBROUTINE BUT WHOSE VALUES MUST
C     BE PRESERVED BETWEEN CALLS TO THE ROUTINE (OWN VARIABLES), AND
C (B) VARIABLES WHICH ARE COMMUNICATED BETWEEN SUBROUTINES. 
C THE STRUCTURE OF EACH BLOCK IS AS FOLLOWS..  ALL REAL VARIABLES ARE 
C LISTED FIRST, FOLLOWED BY ALL INTEGERS.  WITHIN EACH TYPE, THE
C VARIABLES ARE GROUPED WITH THOSE LOCAL TO SUBROUTINE LSODAR FIRST,
C THEN THOSE LOCAL TO SUBROUTINE ROOTS OR SUBROUTINE STODA
C (NO OTHER ROUTINES HAVE OWN VARIABLES), AND FINALLY THOSE USED
C FOR COMMUNICATION.  THE BLOCK LS0001 IS DECLARED IN SUBROUTINES
C LSODAR, INTDY, STODA, PRJA, AND SOLSY.  THE BLOCK LSA001 IS DECLARED
C IN SUBROUTINES LSODAR, STODA, AND PRJA.  THE BLOCK LSR001 IS DECLARED
C IN SUBROUTINES LSODAR, RCHEK, AND ROOTS.  GROUPS OF VARIABLES ARE
C REPLACED BY DUMMY ARRAYS IN THE COMMON DECLARATIONS IN ROUTINES
C WHERE THOSE VARIABLES ARE NOT USED.
C-----------------------------------------------------------------------
      COMMON /LS0001/ ROWNS(209),
     1   CCMAX, EL0, H, HMIN, HMXI, HU, RC, TN, UROUND,
     2   ILLIN, INIT, LYH, LEWT, LACOR, LSAVF, LWM, LIWM,
     3   MXSTEP, MXHNIL, NHNIL, NTREP, NSLAST, NYH, IOWNS(6),
     4   ICF, IERPJ, IERSL, JCUR, JSTART, KFLAG, L, METH, MITER,
     5   MAXORD, MAXCOR, MSBP, MXNCF, N, NQ, NST, NFE, NJE, NQU
      COMMON /LSA001/ TSW, ROWNS2(20), PDNORM,
     1   INSUFR, INSUFI, IXPR, IOWNS2(2), JTYP, MUSED, MXORDN, MXORDS 
      COMMON /LSR001/ ROWNR3(2), T0, TLAST, TOUTC,
     1   LG0, LG1, LGX, IOWNR3(2), IRFND, ITASKC, NGC, NGE
C
      DATA MORD(1),MORD(2)/12,5/, MXSTP0/500/, MXHNL0/10/
C-----------------------------------------------------------------------
C BLOCK A.
C THIS CODE BLOCK IS EXECUTED ON EVERY CALL.
C IT TESTS ISTATE AND ITASK FOR LEGALITY AND BRANCHES APPROPRIATELY.
C IF ISTATE .GT. 1 BUT THE FLAG INIT SHOWS THAT INITIALIZATION HAS
C NOT YET BEEN DONE, AN ERROR RETURN OCCURS.
C IF ISTATE = 1 AND TOUT = T, JUMP TO BLOCK G AND RETURN IMMEDIATELY. 
C-----------------------------------------------------------------------
      IF (ISTATE .LT. 1 .OR. ISTATE .GT. 3) GO TO 601
      IF (ITASK .LT. 1 .OR. ITASK .GT. 5) GO TO 602
      ITASKC = ITASK
      IF (ISTATE .EQ. 1) GO TO 10
      IF (INIT .EQ. 0) GO TO 603
      IF (ISTATE .EQ. 2) GO TO 200
      GO TO 20
 10   INIT = 0
      IF (TOUT .EQ. T) GO TO 430
 20   NTREP = 0
C-----------------------------------------------------------------------
C BLOCK B.
C THE NEXT CODE BLOCK IS EXECUTED FOR THE INITIAL CALL (ISTATE = 1),
C OR FOR A CONTINUATION CALL WITH PARAMETER CHANGES (ISTATE = 3).
C IT CONTAINS CHECKING OF ALL INPUTS AND VARIOUS INITIALIZATIONS.
C
C FIRST CHECK LEGALITY OF THE NON-OPTIONAL INPUTS NEQ, ITOL, IOPT,
C JT, ML, MU, AND NG.
C-----------------------------------------------------------------------
      IF (NEQ(1) .LE. 0) GO TO 604
      IF (ISTATE .EQ. 1) GO TO 25
      IF (NEQ(1) .GT. N) GO TO 605
 25   N = NEQ(1)
      IF (ITOL .LT. 1 .OR. ITOL .GT. 4) GO TO 606 
      IF (IOPT .LT. 0 .OR. IOPT .GT. 1) GO TO 607 
      IF (JT .EQ. 3 .OR. JT .LT. 1 .OR. JT .GT. 5) GO TO 608
      JTYP = JT
      IF (JT .LE. 2) GO TO 30 
      ML = IWORK(1) 
      MU = IWORK(2) 
      IF (ML .LT. 0 .OR. ML .GE. N) GO TO 609
      IF (MU .LT. 0 .OR. MU .GE. N) GO TO 610
 30   CONTINUE
      IF (NG .LT. 0) GO TO 630
      IF (ISTATE .EQ. 1) GO TO 35
      IF (IRFND .EQ. 0 .AND. NG .NE. NGC) GO TO 631
 35   NGC = NG
C NEXT PROCESS AND CHECK THE OPTIONAL INPUTS. --------------------------
      IF (IOPT .EQ. 1) GO TO 40
      IXPR = 0
      MXSTEP = MXSTP0
      MXHNIL = MXHNL0
      HMXI = 0.0D0
      HMIN = 0.0D0
      IF (ISTATE .NE. 1) GO TO 60
      H0 = 0.0D0
      MXORDN = MORD(1)
      MXORDS = MORD(2)
      GO TO 60
 40   IXPR = IWORK(5)
      IF (IXPR .LT. 0 .OR. IXPR .GT. 1) GO TO 611 
      MXSTEP = IWORK(6)
      IF (MXSTEP .LT. 0) GO TO 612
      IF (MXSTEP .EQ. 0) MXSTEP = MXSTP0
      MXHNIL = IWORK(7)
      IF (MXHNIL .LT. 0) GO TO 613
      IF (MXHNIL .EQ. 0) MXHNIL = MXHNL0
      IF (ISTATE .NE. 1) GO TO 50
      H0 = RWORK(5) 
      MXORDN = IWORK(8)
      IF (MXORDN .LT. 0) GO TO 628
      IF (MXORDN .EQ. 0) MXORDN = 100
      MXORDN = MIN0(MXORDN,MORD(1))
      MXORDS = IWORK(9)
      IF (MXORDS .LT. 0) GO TO 629
      IF (MXORDS .EQ. 0) MXORDS = 100
      MXORDS = MIN0(MXORDS,MORD(2))
      IF ((TOUT - T)*H0 .LT. 0.0D0) GO TO 614
 50   HMAX = RWORK(6)
      IF (HMAX .LT. 0.0D0) GO TO 615
      HMXI = 0.0D0
      IF (HMAX .GT. 0.0D0) HMXI = 1.0D0/HMAX
      HMIN = RWORK(7)
      IF (HMIN .LT. 0.0D0) GO TO 616
C-----------------------------------------------------------------------
C SET WORK ARRAY POINTERS AND CHECK LENGTHS LRW AND LIW.
C IF ISTATE = 1, METH IS INITIALIZED TO 1 HERE TO FACILITATE THE
C CHECKING OF WORK SPACE LENGTHS.
C POINTERS TO SEGMENTS OF RWORK AND IWORK ARE NAMED BY PREFIXING L TO 
C THE NAME OF THE SEGMENT.  E.G., THE SEGMENT YH STARTS AT RWORK(LYH).
C SEGMENTS OF RWORK (IN ORDER) ARE DENOTED  G0, G1, GX, YH, WM,
C EWT, SAVF, ACOR.
C IF THE LENGTHS PROVIDED ARE INSUFFICIENT FOR THE CURRENT METHOD,
C AN ERROR RETURN OCCURS.  THIS IS TREATED AS ILLEGAL INPUT ON THE
C FIRST CALL, BUT AS A PROBLEM INTERRUPTION WITH ISTATE = -7 ON A
C CONTINUATION CALL.  IF THE LENGTHS ARE SUFFICIENT FOR THE CURRENT
C METHOD BUT NOT FOR BOTH METHODS, A WARNING MESSAGE IS SENT.
C-----------------------------------------------------------------------
 60   IF (ISTATE .EQ. 1) METH = 1
      IF (ISTATE .EQ. 1) NYH = N
      LG0 = 21
      LG1 = LG0 + NG
      LGX = LG1 + NG
      LYHNEW = LGX + NG
      IF (ISTATE .EQ. 1) LYH = LYHNEW
      IF (LYHNEW .EQ. LYH) GO TO 62
C IF ISTATE = 3 AND NG WAS CHANGED, SHIFT YH TO ITS NEW LOCATION. ------
      LENYH = L*NYH 
      IF (LRW .LT. LYHNEW-1+LENYH) GO TO 62
      I1 = 1
      IF (LYHNEW .GT. LYH) I1 = -1
      CALL DCOPY (LENYH, RWORK(LYH), I1, RWORK(LYHNEW), I1) 
      LYH = LYHNEW
 62   CONTINUE
      LEN1N = LYHNEW - 1 + (MXORDN + 1)*NYH
      LEN1S = LYHNEW - 1 + (MXORDS + 1)*NYH
      LWM = LEN1S + 1
      IF (JT .LE. 2) LENWM = N*N + 2
      IF (JT .GE. 4) LENWM = (2*ML + MU + 1)*N + 2
      LEN1S = LEN1S + LENWM
      LEN1C = LEN1N 
      IF (METH .EQ. 2) LEN1C = LEN1S
      LEN1 = MAX0(LEN1N,LEN1S)
      LEN2 = 3*N
      LENRW = LEN1 + LEN2
      LENRWN = LEN1N + LEN2
      LENRWS = LEN1S + LEN2
      LENRWC = LEN1C + LEN2
      IWORK(17) = LENRW
      LIWM = 1
      LENIW = 20 + N
      LENIWC = 20
      IF (METH .EQ. 2) LENIWC = LENIW
      IWORK(18) = LENIW
      IF (ISTATE .EQ. 1 .AND. LRW .LT. LENRWC) GO TO 617
      IF (ISTATE .EQ. 1 .AND. LIW .LT. LENIWC) GO TO 618
      IF (ISTATE .EQ. 3 .AND. LRW .LT. LENRWC) GO TO 550
      IF (ISTATE .EQ. 3 .AND. LIW .LT. LENIWC) GO TO 555
      LEWT = LEN1 + 1
      INSUFR = 0
      IF (LRW .GE. LENRW) GO TO 65
      INSUFR = 2
      LEWT = LEN1C + 1
      CALL XERRWV(
     1  60HLSODAR-  WARNING.. RWORK LENGTH IS SUFFICIENT FOR NOW, BUT  ,
     1   60, 103, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(
     1  60H      MAY NOT BE LATER.  INTEGRATION WILL PROCEED ANYWAY.   ,
     1   60, 103, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(
     1  50H      LENGTH NEEDED IS LENRW = I1, WHILE LRW = I2.,
     1   50, 103, 0, 2, LENRW, LRW, 0, 0.0D0, 0.0D0)
 65   LSAVF = LEWT + N
      LACOR = LSAVF + N
      INSUFI = 0
      IF (LIW .GE. LENIW) GO TO 70
      INSUFI = 2
      CALL XERRWV(
     1  60HLSODAR-  WARNING.. IWORK LENGTH IS SUFFICIENT FOR NOW, BUT  ,
     1   60, 104, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(
     1  60H      MAY NOT BE LATER.  INTEGRATION WILL PROCEED ANYWAY.   ,
     1   60, 104, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(
     1  50H      LENGTH NEEDED IS LENIW = I1, WHILE LIW = I2.,
     1   50, 104, 0, 2, LENIW, LIW, 0, 0.0D0, 0.0D0)
 70   CONTINUE
C CHECK RTOL AND ATOL FOR LEGALITY. ------------------------------------
      RTOLI = RTOL(1)
      ATOLI = ATOL(1)
      DO 75 I = 1,N 
        IF (ITOL .GE. 3) RTOLI = RTOL(I)
        IF (ITOL .EQ. 2 .OR. ITOL .EQ. 4) ATOLI = ATOL(I)
        IF (RTOLI .LT. 0.0D0) GO TO 619 
        IF (ATOLI .LT. 0.0D0) GO TO 620 
 75     CONTINUE
      IF (ISTATE .EQ. 1) GO TO 100
C IF ISTATE = 3, SET FLAG TO SIGNAL PARAMETER CHANGES TO STODA. --------
      JSTART = -1
      IF (N .EQ. NYH) GO TO 200
C NEQ WAS REDUCED.  ZERO PART OF YH TO AVOID UNDEFINED REFERENCES. -----
      I1 = LYH + L*NYH
      I2 = LYH + (MAXORD + 1)*NYH - 1
      IF (I1 .GT. I2) GO TO 200
      DO 95 I = I1,I2
 95     RWORK(I) = 0.0D0
      GO TO 200
C-----------------------------------------------------------------------
C BLOCK C.
C THE NEXT BLOCK IS FOR THE INITIAL CALL ONLY (ISTATE = 1). 
C IT CONTAINS ALL REMAINING INITIALIZATIONS, THE INITIAL CALL TO F,
C AND THE CALCULATION OF THE INITIAL STEP SIZE.
C THE ERROR WEIGHTS IN EWT ARE INVERTED AFTER BEING LOADED. 
C-----------------------------------------------------------------------
 100  UROUND = D1MACH(4)
      TN = T
      TSW = T
      MAXORD = MXORDN
      IF (ITASK .NE. 4 .AND. ITASK .NE. 5) GO TO 110
      TCRIT = RWORK(1)
      IF ((TCRIT - TOUT)*(TOUT - T) .LT. 0.0D0) GO TO 625
      IF (H0 .NE. 0.0D0 .AND. (T + H0 - TCRIT)*H0 .GT. 0.0D0)
     1   H0 = TCRIT - T
 110  JSTART = 0
      NHNIL = 0
      NST = 0
      NJE = 0
      NSLAST = 0
      HU = 0.0D0
      NQU = 0
      MUSED = 0
      MITER = 0
      CCMAX = 0.3D0 
      MAXCOR = 3
      MSBP = 20
      MXNCF = 10
C INITIAL CALL TO F.  (LF0 POINTS TO YH(*,2).) -------------------------
      LF0 = LYH + NYH
      CALL F (NEQ, T, Y, RWORK(LF0))
      NFE = 1
C LOAD THE INITIAL VALUE VECTOR IN YH. ---------------------------------
      DO 115 I = 1,N
 115    RWORK(I+LYH-1) = Y(I) 
C LOAD AND INVERT THE EWT ARRAY.  (H IS TEMPORARILY SET TO 1.0.) -------
      NQ = 1
      H = 1.0D0
      CALL EWSET (N, ITOL, RTOL, ATOL, RWORK(LYH), RWORK(LEWT))
      DO 120 I = 1,N
        IF (RWORK(I+LEWT-1) .LE. 0.0D0) GO TO 621 
 120    RWORK(I+LEWT-1) = 1.0D0/RWORK(I+LEWT-1)
C-----------------------------------------------------------------------
C THE CODING BELOW COMPUTES THE STEP SIZE, H0, TO BE ATTEMPTED ON THE 
C FIRST STEP, UNLESS THE USER HAS SUPPLIED A VALUE FOR THIS.
C FIRST CHECK THAT TOUT - T DIFFERS SIGNIFICANTLY FROM ZERO.
C A SCALAR TOLERANCE QUANTITY TOL IS COMPUTED, AS MAX(RTOL(I))
C IF THIS IS POSITIVE, OR MAX(ATOL(I)/ABS(Y(I))) OTHERWISE, ADJUSTED
C SO AS TO BE BETWEEN 100*UROUND AND 1.0E-3.
C THEN THE COMPUTED VALUE H0 IS GIVEN BY..
C
C   H0**(-2)  =  1./(TOL * W0**2)  +  TOL * (NORM(F))**2
C
C WHERE   W0     = MAX ( ABS(T), ABS(TOUT) ),
C         F      = THE INITIAL VALUE OF THE VECTOR F(T,Y), AND
C         NORM() = THE WEIGHTED VECTOR NORM USED THROUGHOUT, GIVEN BY 
C                  THE VMNORM FUNCTION ROUTINE, AND WEIGHTED BY THE
C                  TOLERANCES INITIALLY LOADED INTO THE EWT ARRAY.
C THE SIGN OF H0 IS INFERRED FROM THE INITIAL VALUES OF TOUT AND T.
C ABS(H0) IS MADE .LE. ABS(TOUT-T) IN ANY CASE.
C-----------------------------------------------------------------------
      IF (H0 .NE. 0.0D0) GO TO 180
      TDIST = DABS(TOUT - T)
      W0 = DMAX1(DABS(T),DABS(TOUT))
      IF (TDIST .LT. 2.0D0*UROUND*W0) GO TO 622
      TOL = RTOL(1) 
      IF (ITOL .LE. 2) GO TO 140
      DO 130 I = 1,N
 130    TOL = DMAX1(TOL,RTOL(I))
 140  IF (TOL .GT. 0.0D0) GO TO 160
      ATOLI = ATOL(1)
      DO 150 I = 1,N
        IF (ITOL .EQ. 2 .OR. ITOL .EQ. 4) ATOLI = ATOL(I)
        AYI = DABS(Y(I))
        IF (AYI .NE. 0.0D0) TOL = DMAX1(TOL,ATOLI/AYI)
 150    CONTINUE
 160  TOL = DMAX1(TOL,100.0D0*UROUND)
      TOL = DMIN1(TOL,0.001D0)
      SUM = VMNORM (N, RWORK(LF0), RWORK(LEWT))
      SUM = 1.0D0/(TOL*W0*W0) + TOL*SUM**2
      H0 = 1.0D0/DSQRT(SUM)
      H0 = DMIN1(H0,TDIST)
      H0 = DSIGN(H0,TOUT-T)
C ADJUST H0 IF NECESSARY TO MEET HMAX BOUND. ---------------------------
 180  RH = DABS(H0)*HMXI
      IF (RH .GT. 1.0D0) H0 = H0/RH
C LOAD H WITH H0 AND SCALE YH(*,2) BY H0. ------------------------------
      H = H0
      DO 190 I = 1,N
 190    RWORK(I+LF0-1) = H0*RWORK(I+LF0-1)
C
C CHECK FOR A ZERO OF G AT T. ------------------------------------------
      IRFND = 0
      TOUTC = TOUT
      IF (NGC .EQ. 0) GO TO 270
      CALL RCHEK (1, G, NEQ, Y, RWORK(LYH), NYH,
     1   RWORK(LG0), RWORK(LG1), RWORK(LGX), JROOT, IRT)
      IF (IRT .EQ. 0) GO TO 270
      GO TO 632
C-----------------------------------------------------------------------
C BLOCK D.
C THE NEXT CODE BLOCK IS FOR CONTINUATION CALLS ONLY (ISTATE = 2 OR 3)
C AND IS TO CHECK STOP CONDITIONS BEFORE TAKING A STEP.
C FIRST, RCHEK IS CALLED TO CHECK FOR A ROOT WITHIN THE LAST STEP
C TAKEN, OTHER THAN THE LAST ROOT FOUND THERE, IF ANY.
C IF ITASK = 2 OR 5, AND Y(TN) HAS NOT YET BEEN RETURNED TO THE USER
C BECAUSE OF AN INTERVENING ROOT, RETURN THROUGH BLOCK G.
C-----------------------------------------------------------------------
 200  NSLAST = NST
C
      IRFP = IRFND
      IF (NGC .EQ. 0) GO TO 205
      IF (ITASK .EQ. 1 .OR. ITASK .EQ. 4) TOUTC = TOUT
      CALL RCHEK (2, G, NEQ, Y, RWORK(LYH), NYH,
     1   RWORK(LG0), RWORK(LG1), RWORK(LGX), JROOT, IRT)
      IF (IRT .NE. 1) GO TO 205
      IRFND = 1
      ISTATE = 3
      T = T0
      GO TO 425
 205  CONTINUE
      IRFND = 0
      IF (IRFP .EQ. 1 .AND. TLAST .NE. TN .AND. ITASK .EQ. 2) GO TO 400
C
      GO TO (210, 250, 220, 230, 240), ITASK
 210  IF ((TN - TOUT)*H .LT. 0.0D0) GO TO 250
      CALL INTDY (TOUT, 0, RWORK(LYH), NYH, Y, IFLAG)
      IF (IFLAG .NE. 0) GO TO 627
      T = TOUT
      GO TO 420
 220  TP = TN - HU*(1.0D0 + 100.0D0*UROUND)
      IF ((TP - TOUT)*H .GT. 0.0D0) GO TO 623
      IF ((TN - TOUT)*H .LT. 0.0D0) GO TO 250
      T = TN
      GO TO 400
 230  TCRIT = RWORK(1)
      IF ((TN - TCRIT)*H .GT. 0.0D0) GO TO 624
      IF ((TCRIT - TOUT)*H .LT. 0.0D0) GO TO 625
      IF ((TN - TOUT)*H .LT. 0.0D0) GO TO 245
      CALL INTDY (TOUT, 0, RWORK(LYH), NYH, Y, IFLAG)
      IF (IFLAG .NE. 0) GO TO 627
      T = TOUT
      GO TO 420
 240  TCRIT = RWORK(1)
      IF ((TN - TCRIT)*H .GT. 0.0D0) GO TO 624
 245  HMX = DABS(TN) + DABS(H)
      IHIT = DABS(TN - TCRIT) .LE. 100.0D0*UROUND*HMX
      IF (IHIT) T = TCRIT
      IF (IRFP .EQ. 1 .AND. TLAST .NE. TN .AND. ITASK .EQ. 5) GO TO 400
      IF (IHIT) GO TO 400
      TNEXT = TN + H*(1.0D0 + 4.0D0*UROUND)
      IF ((TNEXT - TCRIT)*H .LE. 0.0D0) GO TO 250 
      H = (TCRIT - TN)*(1.0D0 - 4.0D0*UROUND)
      IF (ISTATE .EQ. 2) JSTART = -2
C-----------------------------------------------------------------------
C BLOCK E.
C THE NEXT BLOCK IS NORMALLY EXECUTED FOR ALL CALLS AND CONTAINS
C THE CALL TO THE ONE-STEP CORE INTEGRATOR STODA. 
C
C THIS IS A LOOPING POINT FOR THE INTEGRATION STEPS.
C
C FIRST CHECK FOR TOO MANY STEPS BEING TAKEN, UPDATE EWT (IF NOT AT
C START OF PROBLEM), CHECK FOR TOO MUCH ACCURACY BEING REQUESTED, AND 
C CHECK FOR H BELOW THE ROUNDOFF LEVEL IN T.
C-----------------------------------------------------------------------
 250  CONTINUE
      IF (METH .EQ. MUSED) GO TO 255
      IF (INSUFR .EQ. 1) GO TO 550
      IF (INSUFI .EQ. 1) GO TO 555
 255  IF ((NST-NSLAST) .GE. MXSTEP) GO TO 500
      CALL EWSET (N, ITOL, RTOL, ATOL, RWORK(LYH), RWORK(LEWT))
      DO 260 I = 1,N
        IF (RWORK(I+LEWT-1) .LE. 0.0D0) GO TO 510 
 260    RWORK(I+LEWT-1) = 1.0D0/RWORK(I+LEWT-1)
 270  TOLSF = UROUND*VMNORM (N, RWORK(LYH), RWORK(LEWT))
      IF (TOLSF .LE. 0.01D0) GO TO 280
      TOLSF = TOLSF*200.0D0
      IF (NST .EQ. 0) GO TO 626
      GO TO 520
 280  IF ((TN + H) .NE. TN) GO TO 290
      NHNIL = NHNIL + 1
      IF (NHNIL .GT. MXHNIL) GO TO 290
      CALL XERRWV(50HLSODAR-  WARNING..INTERNAL T (=R1) AND H (=R2) ARE,
     1   50, 101, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(
     1  60H      SUCH THAT IN THE MACHINE, T + H = T ON THE NEXT STEP  ,
     1   60, 101, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(50H      (H = STEP SIZE). SOLVER WILL CONTINUE ANYWAY,
     1   50, 101, 0, 0, 0, 0, 2, TN, H) 
      IF (NHNIL .LT. MXHNIL) GO TO 290
      CALL XERRWV(50HLSODAR-  ABOVE WARNING HAS BEEN ISSUED I1 TIMES.  ,
     1   50, 102, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(50H      IT WILL NOT BE ISSUED AGAIN FOR THIS PROBLEM,
     1   50, 102, 0, 1, MXHNIL, 0, 0, 0.0D0, 0.0D0)
 290  CONTINUE
C-----------------------------------------------------------------------
C     CALL STODA(NEQ,Y,YH,NYH,YH,EWT,SAVF,ACOR,WM,IWM,F,JAC,PRJA,SOLSY)
C-----------------------------------------------------------------------
      CALL STODA (NEQ, Y, RWORK(LYH), NYH, RWORK(LYH), RWORK(LEWT),
     1   RWORK(LSAVF), RWORK(LACOR), RWORK(LWM), IWORK(LIWM),
     2   F, JAC, PRJA, SOLSY) 
      KGO = 1 - KFLAG
      GO TO (300, 530, 540), KGO
C-----------------------------------------------------------------------
C BLOCK F.
C THE FOLLOWING BLOCK HANDLES THE CASE OF A SUCCESSFUL RETURN FROM THE
C CORE INTEGRATOR (KFLAG = 0).
C IF A METHOD SWITCH WAS JUST MADE, RECORD TSW, RESET MAXORD,
C SET JSTART TO -1 TO SIGNAL STODA TO COMPLETE THE SWITCH,
C AND DO EXTRA PRINTING OF DATA IF IXPR = 1.
C THEN CALL RCHEK TO CHECK FOR A ROOT WITHIN THE LAST STEP. 
C THEN, IF NO ROOT WAS FOUND, CHECK FOR STOP CONDITIONS.
C-----------------------------------------------------------------------
 300  INIT = 1
      IF (METH .EQ. MUSED) GO TO 310
      TSW = TN
      MAXORD = MXORDN
      IF (METH .EQ. 2) MAXORD = MXORDS
      IF (METH .EQ. 2) RWORK(LWM) = DSQRT(UROUND) 
      INSUFR = MIN0(INSUFR,1) 
      INSUFI = MIN0(INSUFI,1) 
      JSTART = -1
      IF (IXPR .EQ. 0) GO TO 310
      IF (METH .EQ. 2) CALL XERRWV(
     1  60HLSODAR- A SWITCH TO THE BDF (STIFF) METHOD HAS OCCURRED     ,
     1   60, 105, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      IF (METH .EQ. 1) CALL XERRWV(
     1  60HLSODAR- A SWITCH TO THE ADAMS (NONSTIFF) METHOD HAS OCCURRED,
     1   60, 106, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(
     1  60H     AT T = R1,  TENTATIVE STEP SIZE H = R2,  STEP NST = I1 ,
     1   60, 107, 0, 1, NST, 0, 2, TN, H)
 310  CONTINUE
C
      IF (NGC .EQ. 0) GO TO 315
      CALL RCHEK (3, G, NEQ, Y, RWORK(LYH), NYH,
     1   RWORK(LG0), RWORK(LG1), RWORK(LGX), JROOT, IRT)
      IF (IRT .NE. 1) GO TO 315
      IRFND = 1
      ISTATE = 3
      T = T0
      GO TO 425
 315  CONTINUE
C
      GO TO (320, 400, 330, 340, 350), ITASK
C ITASK = 1.  IF TOUT HAS BEEN REACHED, INTERPOLATE. -------------------
 320  IF ((TN - TOUT)*H .LT. 0.0D0) GO TO 250
      CALL INTDY (TOUT, 0, RWORK(LYH), NYH, Y, IFLAG)
      T = TOUT
      GO TO 420
C ITASK = 3.  JUMP TO EXIT IF TOUT WAS REACHED. ------------------------
 330  IF ((TN - TOUT)*H .GE. 0.0D0) GO TO 400
      GO TO 250
C ITASK = 4.  SEE IF TOUT OR TCRIT WAS REACHED.  ADJUST H IF NECESSARY.
 340  IF ((TN - TOUT)*H .LT. 0.0D0) GO TO 345
      CALL INTDY (TOUT, 0, RWORK(LYH), NYH, Y, IFLAG)
      T = TOUT
      GO TO 420
 345  HMX = DABS(TN) + DABS(H)
      IHIT = DABS(TN - TCRIT) .LE. 100.0D0*UROUND*HMX
      IF (IHIT) GO TO 400
      TNEXT = TN + H*(1.0D0 + 4.0D0*UROUND)
      IF ((TNEXT - TCRIT)*H .LE. 0.0D0) GO TO 250 
      H = (TCRIT - TN)*(1.0D0 - 4.0D0*UROUND)
      JSTART = -2
      GO TO 250
C ITASK = 5.  SEE IF TCRIT WAS REACHED AND JUMP TO EXIT. ---------------
 350  HMX = DABS(TN) + DABS(H)
      IHIT = DABS(TN - TCRIT) .LE. 100.0D0*UROUND*HMX
C-----------------------------------------------------------------------
C BLOCK G.
C THE FOLLOWING BLOCK HANDLES ALL SUCCESSFUL RETURNS FROM LSODAR.
C IF ITASK .NE. 1, Y IS LOADED FROM YH AND T IS SET ACCORDINGLY.
C ISTATE IS SET TO 2, THE ILLEGAL INPUT COUNTER IS ZEROED, AND THE
C OPTIONAL OUTPUTS ARE LOADED INTO THE WORK ARRAYS BEFORE RETURNING.
C IF ISTATE = 1 AND TOUT = T, THERE IS A RETURN WITH NO ACTION TAKEN, 
C EXCEPT THAT IF THIS HAS HAPPENED REPEATEDLY, THE RUN IS TERMINATED. 
C-----------------------------------------------------------------------
 400  DO 410 I = 1,N
 410    Y(I) = RWORK(I+LYH-1) 
      T = TN
      IF (ITASK .NE. 4 .AND. ITASK .NE. 5) GO TO 420
      IF (IHIT) T = TCRIT
 420  ISTATE = 2
 425  CONTINUE
      ILLIN = 0
      RWORK(11) = HU
      RWORK(12) = H 
      RWORK(13) = TN
      RWORK(15) = TSW
      IWORK(11) = NST
      IWORK(12) = NFE
      IWORK(13) = NJE
      IWORK(14) = NQU
      IWORK(15) = NQ
      IWORK(19) = MUSED
      IWORK(20) = METH
      IWORK(10) = NGE
      TLAST = T
      RETURN
C
 430  NTREP = NTREP + 1
      IF (NTREP .LT. 5) RETURN
      CALL XERRWV(
     1  60HLSODAR-  REPEATED CALLS WITH ISTATE = 1 AND TOUT = T (=R1)  ,
     1   60, 301, 0, 0, 0, 0, 1, T, 0.0D0)
      GO TO 800
C-----------------------------------------------------------------------
C BLOCK H.
C THE FOLLOWING BLOCK HANDLES ALL UNSUCCESSFUL RETURNS OTHER THAN
C THOSE FOR ILLEGAL INPUT.  FIRST THE ERROR MESSAGE ROUTINE IS CALLED.
C IF THERE WAS AN ERROR TEST OR CONVERGENCE TEST FAILURE, IMXER IS SET.
C THEN Y IS LOADED FROM YH, T IS SET TO TN, AND THE ILLEGAL INPUT
C COUNTER ILLIN IS SET TO 0.  THE OPTIONAL OUTPUTS ARE LOADED INTO
C THE WORK ARRAYS BEFORE RETURNING.
C-----------------------------------------------------------------------
C THE MAXIMUM NUMBER OF STEPS WAS TAKEN BEFORE REACHING TOUT. ----------
 500  CALL XERRWV(50HLSODAR-  AT CURRENT T (=R1), MXSTEP (=I1) STEPS   ,
     1   50, 201, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(50H      TAKEN ON THIS CALL BEFORE REACHING TOUT     ,
     1   50, 201, 0, 1, MXSTEP, 0, 1, TN, 0.0D0)
      ISTATE = -1
      GO TO 580
C EWT(I) .LE. 0.0 FOR SOME I (NOT AT START OF PROBLEM). ----------------
 510  EWTI = RWORK(LEWT+I-1)
      CALL XERRWV(50HLSODAR-  AT T (=R1), EWT(I1) HAS BECOME R2 .LE. 0.,
     1   50, 202, 0, 1, I, 0, 2, TN, EWTI)
      ISTATE = -6
      GO TO 580
C TOO MUCH ACCURACY REQUESTED FOR MACHINE PRECISION. -------------------
 520  CALL XERRWV(50HLSODAR-  AT T (=R1), TOO MUCH ACCURACY REQUESTED  ,
     1   50, 203, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(50H      FOR PRECISION OF MACHINE..  SEE TOLSF (=R2) ,
     1   50, 203, 0, 0, 0, 0, 2, TN, TOLSF)
      RWORK(14) = TOLSF
      ISTATE = -2
      GO TO 580
C KFLAG = -1.  ERROR TEST FAILED REPEATEDLY OR WITH ABS(H) = HMIN. -----
 530  CALL XERRWV(50HLSODAR-  AT T(=R1) AND STEP SIZE H(=R2), THE ERROR,
     1   50, 204, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(50H      TEST FAILED REPEATEDLY OR WITH ABS(H) = HMIN,
     1   50, 204, 0, 0, 0, 0, 2, TN, H) 
      ISTATE = -4
      GO TO 560
C KFLAG = -2.  CONVERGENCE FAILED REPEATEDLY OR WITH ABS(H) = HMIN. ----
 540  CALL XERRWV(50HLSODAR-  AT T (=R1) AND STEP SIZE H (=R2), THE    ,
     1   50, 205, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(50H      CORRECTOR CONVERGENCE FAILED REPEATEDLY     ,
     1   50, 205, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(30H      OR WITH ABS(H) = HMIN   ,
     1   30, 205, 0, 0, 0, 0, 2, TN, H) 
      ISTATE = -5
      GO TO 560
C RWORK LENGTH TOO SMALL TO PROCEED. -----------------------------------
 550  CALL XERRWV(50HLSODAR-  AT CURRENT T(=R1), RWORK LENGTH TOO SMALL,
     1   50, 206, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(
     1  60H      TO PROCEED.  THE INTEGRATION WAS OTHERWISE SUCCESSFUL.,
     1   60, 206, 0, 0, 0, 0, 1, TN, 0.0D0)
      ISTATE = -7
      GO TO 580
C IWORK LENGTH TOO SMALL TO PROCEED. -----------------------------------
 555  CALL XERRWV(50HLSODAR-  AT CURRENT T(=R1), IWORK LENGTH TOO SMALL,
     1   50, 207, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(
     1  60H      TO PROCEED.  THE INTEGRATION WAS OTHERWISE SUCCESSFUL.,
     1   60, 207, 0, 0, 0, 0, 1, TN, 0.0D0)
      ISTATE = -7
      GO TO 580
C COMPUTE IMXER IF RELEVANT. -------------------------------------------
 560  BIG = 0.0D0
      IMXER = 1
      DO 570 I = 1,N
        SIZE = DABS(RWORK(I+LACOR-1)*RWORK(I+LEWT-1))
        IF (BIG .GE. SIZE) GO TO 570
        BIG = SIZE
        IMXER = I
 570    CONTINUE
      IWORK(16) = IMXER
C SET Y VECTOR, T, ILLIN, AND OPTIONAL OUTPUTS. ------------------------
 580  DO 590 I = 1,N
 590    Y(I) = RWORK(I+LYH-1) 
      T = TN
      ILLIN = 0
      RWORK(11) = HU
      RWORK(12) = H 
      RWORK(13) = TN
      RWORK(15) = TSW
      IWORK(11) = NST
      IWORK(12) = NFE
      IWORK(13) = NJE
      IWORK(14) = NQU
      IWORK(15) = NQ
      IWORK(19) = MUSED
      IWORK(20) = METH
      IWORK(10) = NGE
      TLAST = T
      RETURN
C-----------------------------------------------------------------------
C BLOCK I.
C THE FOLLOWING BLOCK HANDLES ALL ERROR RETURNS DUE TO ILLEGAL INPUT
C (ISTATE = -3), AS DETECTED BEFORE CALLING THE CORE INTEGRATOR.
C FIRST THE ERROR MESSAGE ROUTINE IS CALLED.  THEN IF THERE HAVE BEEN 
C 5 CONSECUTIVE SUCH RETURNS JUST BEFORE THIS CALL TO THE SOLVER,
C THE RUN IS HALTED.
C-----------------------------------------------------------------------
 601  CALL XERRWV(30HLSODAR-  ISTATE (=I1) ILLEGAL ,
     1   30, 1, 0, 1, ISTATE, 0, 0, 0.0D0, 0.0D0) 
      GO TO 700
 602  CALL XERRWV(30HLSODAR-  ITASK (=I1) ILLEGAL  ,
     1   30, 2, 0, 1, ITASK, 0, 0, 0.0D0, 0.0D0)
      GO TO 700
 603  CALL XERRWV(50HLSODAR-  ISTATE .GT. 1 BUT LSODAR NOT INITIALIZED ,
     1   50, 3, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      GO TO 700
 604  CALL XERRWV(30HLSODAR-  NEQ (=I1) .LT. 1     ,
     1   30, 4, 0, 1, NEQ(1), 0, 0, 0.0D0, 0.0D0) 
      GO TO 700
 605  CALL XERRWV(50HLSODAR-  ISTATE = 3 AND NEQ INCREASED (I1 TO I2)  ,
     1   50, 5, 0, 2, N, NEQ(1), 0, 0.0D0, 0.0D0) 
      GO TO 700
 606  CALL XERRWV(30HLSODAR-  ITOL (=I1) ILLEGAL   ,
     1   30, 6, 0, 1, ITOL, 0, 0, 0.0D0, 0.0D0)
      GO TO 700
 607  CALL XERRWV(30HLSODAR-  IOPT (=I1) ILLEGAL   ,
     1   30, 7, 0, 1, IOPT, 0, 0, 0.0D0, 0.0D0)
      GO TO 700
 608  CALL XERRWV(30HLSODAR-  JT (=I1) ILLEGAL     ,
     1   30, 8, 0, 1, JT, 0, 0, 0.0D0, 0.0D0)
      GO TO 700
 609  CALL XERRWV(50HLSODAR-  ML (=I1) ILLEGAL.. .LT.0 OR .GE.NEQ (=I2),
     1   50, 9, 0, 2, ML, NEQ(1), 0, 0.0D0, 0.0D0)
      GO TO 700
 610  CALL XERRWV(50HLSODAR-  MU (=I1) ILLEGAL.. .LT.0 OR .GE.NEQ (=I2),
     1   50, 10, 0, 2, MU, NEQ(1), 0, 0.0D0, 0.0D0)
      GO TO 700
 611  CALL XERRWV(30HLSODAR-  IXPR (=I1) ILLEGAL   ,
     1   30, 11, 0, 1, IXPR, 0, 0, 0.0D0, 0.0D0)
      GO TO 700
 612  CALL XERRWV(30HLSODAR-  MXSTEP (=I1) .LT. 0  ,
     1   30, 12, 0, 1, MXSTEP, 0, 0, 0.0D0, 0.0D0)
      GO TO 700
 613  CALL XERRWV(30HLSODAR-  MXHNIL (=I1) .LT. 0  ,
     1   30, 13, 0, 1, MXHNIL, 0, 0, 0.0D0, 0.0D0)
      GO TO 700
 614  CALL XERRWV(40HLSODAR-  TOUT (=R1) BEHIND T (=R2)      ,
     1   40, 14, 0, 0, 0, 0, 2, TOUT, T)
      CALL XERRWV(50H      INTEGRATION DIRECTION IS GIVEN BY H0 (=R1)  ,
     1   50, 14, 0, 0, 0, 0, 1, H0, 0.0D0)
      GO TO 700
 615  CALL XERRWV(30HLSODAR-  HMAX (=R1) .LT. 0.0  ,
     1   30, 15, 0, 0, 0, 0, 1, HMAX, 0.0D0)
      GO TO 700
 616  CALL XERRWV(30HLSODAR-  HMIN (=R1) .LT. 0.0  ,
     1   30, 16, 0, 0, 0, 0, 1, HMIN, 0.0D0)
      GO TO 700
 617  CALL XERRWV(
     1  60HLSODAR-  RWORK LENGTH NEEDED, LENRW (=I1), EXCEEDS LRW (=I2),
     1   60, 17, 0, 2, LENRW, LRW, 0, 0.0D0, 0.0D0)
      GO TO 700
 618  CALL XERRWV(
     1  60HLSODAR-  IWORK LENGTH NEEDED, LENIW (=I1), EXCEEDS LIW (=I2),
     1   60, 18, 0, 2, LENIW, LIW, 0, 0.0D0, 0.0D0)
      GO TO 700
 619  CALL XERRWV(40HLSODAR-  RTOL(I1) IS R1 .LT. 0.0        ,
     1   40, 19, 0, 1, I, 0, 1, RTOLI, 0.0D0)
      GO TO 700
 620  CALL XERRWV(40HLSODAR-  ATOL(I1) IS R1 .LT. 0.0        ,
     1   40, 20, 0, 1, I, 0, 1, ATOLI, 0.0D0)
      GO TO 700
 621  EWTI = RWORK(LEWT+I-1)
      CALL XERRWV(40HLSODAR-  EWT(I1) IS R1 .LE. 0.0         ,
     1   40, 21, 0, 1, I, 0, 1, EWTI, 0.0D0)
      GO TO 700
 622  CALL XERRWV(
     1  60HLSODAR-  TOUT (=R1) TOO CLOSE TO T(=R2) TO START INTEGRATION,
     1   60, 22, 0, 0, 0, 0, 2, TOUT, T)
      GO TO 700
 623  CALL XERRWV(
     1  60HLSODAR-  ITASK = I1 AND TOUT (=R1) BEHIND TCUR - HU (= R2)  ,
     1   60, 23, 0, 1, ITASK, 0, 2, TOUT, TP)
      GO TO 700
 624  CALL XERRWV(
     1  60HLSODAR-  ITASK = 4 OR 5 AND TCRIT (=R1) BEHIND TCUR (=R2)   ,
     1   60, 24, 0, 0, 0, 0, 2, TCRIT, TN)
      GO TO 700
 625  CALL XERRWV(
     1  60HLSODAR-  ITASK = 4 OR 5 AND TCRIT (=R1) BEHIND TOUT (=R2)   ,
     1   60, 25, 0, 0, 0, 0, 2, TCRIT, TOUT)
      GO TO 700
 626  CALL XERRWV(50HLSODAR-  AT START OF PROBLEM, TOO MUCH ACCURACY   ,
     1   50, 26, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(
     1  60H      REQUESTED FOR PRECISION OF MACHINE..  SEE TOLSF (=R1) ,
     1   60, 26, 0, 0, 0, 0, 1, TOLSF, 0.0D0)
      RWORK(14) = TOLSF
      GO TO 700
 627  CALL XERRWV(50HLSODAR-  TROUBLE FROM INTDY. ITASK = I1, TOUT = R1,
     1   50, 27, 0, 1, ITASK, 0, 1, TOUT, 0.0D0)
      GO TO 700
 628  CALL XERRWV(30HLSODAR-  MXORDN (=I1) .LT. 0  ,
     1   30, 28, 0, 1, MXORDN, 0, 0, 0.0D0, 0.0D0)
      GO TO 700
 629  CALL XERRWV(30HLSODAR-  MXORDS (=I1) .LT. 0  ,
     1   30, 29, 0, 1, MXORDS, 0, 0, 0.0D0, 0.0D0)
      GO TO 700
 630  CALL XERRWV(30HLSODAR-  NG (=I1) .LT. 0      ,
     1   30, 30, 0, 1, NG, 0, 0, 0.0D0, 0.0D0)
      GO TO 700
 631  CALL XERRWV(50HLSODAR-  NG CHANGED (FROM I1 TO I2) ILLEGALLY,    ,
     1   50, 31, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(50H      I.E. NOT IMMEDIATELY AFTER A ROOT WAS FOUND ,
     1   50, 31, 0, 2, NGC, NG, 0, 0.0D0, 0.0D0)
      GO TO 700
 632  CALL XERRWV(50HLSODAR-  ONE OR MORE COMPONENTS OF G HAS A ROOT   ,
     1   50, 32, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
      CALL XERRWV(40H      TOO NEAR TO THE INITIAL POINT     ,
     1   40, 32, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
C
 700  IF (ILLIN .EQ. 5) GO TO 710
      ILLIN = ILLIN + 1
      TLAST = T
      ISTATE = -3
      RETURN
 710  CALL XERRWV(50HLSODAR-  REPEATED OCCURRENCES OF ILLEGAL INPUT    ,
     1   50, 302, 0, 0, 0, 0, 0, 0.0D0, 0.0D0)
C
 800  CALL XERRWV(50HLSODAR-  RUN ABORTED.. APPARENT INFINITE LOOP     ,
     1   50, 303, 2, 0, 0, 0, 0, 0.0D0, 0.0D0)
      RETURN
C----------------------- END OF SUBROUTINE LSODAR ----------------------
      END 
